/*
 * User RoleGroups API
 *
 * Description of the User Group API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package user_rolegroups

import (
	"encoding/json"
)

// Rolegroup struct for Rolegroup
type Rolegroup struct {
	RoleGroupId *string `json:"role_group_id,omitempty"`
	Name *string `json:"name,omitempty"`
	ExternalNames *[]string `json:"external_names,omitempty"`
	Description *string `json:"description,omitempty"`
	OrgId *string `json:"org_id,omitempty"`
	Editable *bool `json:"editable,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	ContextParams *map[string]interface{} `json:"context_params,omitempty"`
	UserRoleGroupId *string `json:"user_role_group_id,omitempty"`
}

// NewRolegroup instantiates a new Rolegroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRolegroup() *Rolegroup {
	this := Rolegroup{}
	return &this
}

// NewRolegroupWithDefaults instantiates a new Rolegroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRolegroupWithDefaults() *Rolegroup {
	this := Rolegroup{}
	return &this
}

// GetRoleGroupId returns the RoleGroupId field value if set, zero value otherwise.
func (o *Rolegroup) GetRoleGroupId() string {
	if o == nil || o.RoleGroupId == nil {
		var ret string
		return ret
	}
	return *o.RoleGroupId
}

// GetRoleGroupIdOk returns a tuple with the RoleGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rolegroup) GetRoleGroupIdOk() (*string, bool) {
	if o == nil || o.RoleGroupId == nil {
		return nil, false
	}
	return o.RoleGroupId, true
}

// HasRoleGroupId returns a boolean if a field has been set.
func (o *Rolegroup) HasRoleGroupId() bool {
	if o != nil && o.RoleGroupId != nil {
		return true
	}

	return false
}

// SetRoleGroupId gets a reference to the given string and assigns it to the RoleGroupId field.
func (o *Rolegroup) SetRoleGroupId(v string) {
	o.RoleGroupId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Rolegroup) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rolegroup) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Rolegroup) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Rolegroup) SetName(v string) {
	o.Name = &v
}

// GetExternalNames returns the ExternalNames field value if set, zero value otherwise.
func (o *Rolegroup) GetExternalNames() []string {
	if o == nil || o.ExternalNames == nil {
		var ret []string
		return ret
	}
	return *o.ExternalNames
}

// GetExternalNamesOk returns a tuple with the ExternalNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rolegroup) GetExternalNamesOk() (*[]string, bool) {
	if o == nil || o.ExternalNames == nil {
		return nil, false
	}
	return o.ExternalNames, true
}

// HasExternalNames returns a boolean if a field has been set.
func (o *Rolegroup) HasExternalNames() bool {
	if o != nil && o.ExternalNames != nil {
		return true
	}

	return false
}

// SetExternalNames gets a reference to the given []string and assigns it to the ExternalNames field.
func (o *Rolegroup) SetExternalNames(v []string) {
	o.ExternalNames = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Rolegroup) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rolegroup) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Rolegroup) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Rolegroup) SetDescription(v string) {
	o.Description = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *Rolegroup) GetOrgId() string {
	if o == nil || o.OrgId == nil {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rolegroup) GetOrgIdOk() (*string, bool) {
	if o == nil || o.OrgId == nil {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *Rolegroup) HasOrgId() bool {
	if o != nil && o.OrgId != nil {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *Rolegroup) SetOrgId(v string) {
	o.OrgId = &v
}

// GetEditable returns the Editable field value if set, zero value otherwise.
func (o *Rolegroup) GetEditable() bool {
	if o == nil || o.Editable == nil {
		var ret bool
		return ret
	}
	return *o.Editable
}

// GetEditableOk returns a tuple with the Editable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rolegroup) GetEditableOk() (*bool, bool) {
	if o == nil || o.Editable == nil {
		return nil, false
	}
	return o.Editable, true
}

// HasEditable returns a boolean if a field has been set.
func (o *Rolegroup) HasEditable() bool {
	if o != nil && o.Editable != nil {
		return true
	}

	return false
}

// SetEditable gets a reference to the given bool and assigns it to the Editable field.
func (o *Rolegroup) SetEditable(v bool) {
	o.Editable = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Rolegroup) GetCreatedAt() string {
	if o == nil || o.CreatedAt == nil {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rolegroup) GetCreatedAtOk() (*string, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Rolegroup) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *Rolegroup) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Rolegroup) GetUpdatedAt() string {
	if o == nil || o.UpdatedAt == nil {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rolegroup) GetUpdatedAtOk() (*string, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Rolegroup) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *Rolegroup) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetContextParams returns the ContextParams field value if set, zero value otherwise.
func (o *Rolegroup) GetContextParams() map[string]interface{} {
	if o == nil || o.ContextParams == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.ContextParams
}

// GetContextParamsOk returns a tuple with the ContextParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rolegroup) GetContextParamsOk() (*map[string]interface{}, bool) {
	if o == nil || o.ContextParams == nil {
		return nil, false
	}
	return o.ContextParams, true
}

// HasContextParams returns a boolean if a field has been set.
func (o *Rolegroup) HasContextParams() bool {
	if o != nil && o.ContextParams != nil {
		return true
	}

	return false
}

// SetContextParams gets a reference to the given map[string]interface{} and assigns it to the ContextParams field.
func (o *Rolegroup) SetContextParams(v map[string]interface{}) {
	o.ContextParams = &v
}

// GetUserRoleGroupId returns the UserRoleGroupId field value if set, zero value otherwise.
func (o *Rolegroup) GetUserRoleGroupId() string {
	if o == nil || o.UserRoleGroupId == nil {
		var ret string
		return ret
	}
	return *o.UserRoleGroupId
}

// GetUserRoleGroupIdOk returns a tuple with the UserRoleGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rolegroup) GetUserRoleGroupIdOk() (*string, bool) {
	if o == nil || o.UserRoleGroupId == nil {
		return nil, false
	}
	return o.UserRoleGroupId, true
}

// HasUserRoleGroupId returns a boolean if a field has been set.
func (o *Rolegroup) HasUserRoleGroupId() bool {
	if o != nil && o.UserRoleGroupId != nil {
		return true
	}

	return false
}

// SetUserRoleGroupId gets a reference to the given string and assigns it to the UserRoleGroupId field.
func (o *Rolegroup) SetUserRoleGroupId(v string) {
	o.UserRoleGroupId = &v
}

func (o Rolegroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RoleGroupId != nil {
		toSerialize["role_group_id"] = o.RoleGroupId
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.ExternalNames != nil {
		toSerialize["external_names"] = o.ExternalNames
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.OrgId != nil {
		toSerialize["org_id"] = o.OrgId
	}
	if o.Editable != nil {
		toSerialize["editable"] = o.Editable
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.ContextParams != nil {
		toSerialize["context_params"] = o.ContextParams
	}
	if o.UserRoleGroupId != nil {
		toSerialize["user_role_group_id"] = o.UserRoleGroupId
	}
	return json.Marshal(toSerialize)
}

type NullableRolegroup struct {
	value *Rolegroup
	isSet bool
}

func (v NullableRolegroup) Get() *Rolegroup {
	return v.value
}

func (v *NullableRolegroup) Set(val *Rolegroup) {
	v.value = val
	v.isSet = true
}

func (v NullableRolegroup) IsSet() bool {
	return v.isSet
}

func (v *NullableRolegroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRolegroup(val *Rolegroup) *NullableRolegroup {
	return &NullableRolegroup{value: val, isSet: true}
}

func (v NullableRolegroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRolegroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


