/*
 * Alert Runtime Manager
 *
 * Description of the Alert in Runtime Manager API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_rm

import (
	"encoding/json"
)

// AlertWithId struct for AlertWithId
type AlertWithId struct {
	Name string `json:"name"`
	Severity string `json:"severity"`
	Actions []Action `json:"actions"`
	Condition Condition `json:"condition"`
}

// NewAlertWithId instantiates a new AlertWithId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertWithId(name string, severity string, actions []Action, condition Condition) *AlertWithId {
	this := AlertWithId{}
	this.Name = name
	this.Severity = severity
	this.Actions = actions
	this.Condition = condition
	return &this
}

// NewAlertWithIdWithDefaults instantiates a new AlertWithId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertWithIdWithDefaults() *AlertWithId {
	this := AlertWithId{}
	return &this
}

// GetName returns the Name field value
func (o *AlertWithId) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AlertWithId) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AlertWithId) SetName(v string) {
	o.Name = v
}

// GetSeverity returns the Severity field value
func (o *AlertWithId) GetSeverity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value
// and a boolean to check if the value has been set.
func (o *AlertWithId) GetSeverityOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Severity, true
}

// SetSeverity sets field value
func (o *AlertWithId) SetSeverity(v string) {
	o.Severity = v
}

// GetActions returns the Actions field value
func (o *AlertWithId) GetActions() []Action {
	if o == nil {
		var ret []Action
		return ret
	}

	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value
// and a boolean to check if the value has been set.
func (o *AlertWithId) GetActionsOk() (*[]Action, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Actions, true
}

// SetActions sets field value
func (o *AlertWithId) SetActions(v []Action) {
	o.Actions = v
}

// GetCondition returns the Condition field value
func (o *AlertWithId) GetCondition() Condition {
	if o == nil {
		var ret Condition
		return ret
	}

	return o.Condition
}

// GetConditionOk returns a tuple with the Condition field value
// and a boolean to check if the value has been set.
func (o *AlertWithId) GetConditionOk() (*Condition, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Condition, true
}

// SetCondition sets field value
func (o *AlertWithId) SetCondition(v Condition) {
	o.Condition = v
}

func (o AlertWithId) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["severity"] = o.Severity
	}
	if true {
		toSerialize["actions"] = o.Actions
	}
	if true {
		toSerialize["condition"] = o.Condition
	}
	return json.Marshal(toSerialize)
}

type NullableAlertWithId struct {
	value *AlertWithId
	isSet bool
}

func (v NullableAlertWithId) Get() *AlertWithId {
	return v.value
}

func (v *NullableAlertWithId) Set(val *AlertWithId) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertWithId) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertWithId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertWithId(val *AlertWithId) *NullableAlertWithId {
	return &NullableAlertWithId{value: val, isSet: true}
}

func (v NullableAlertWithId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertWithId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


