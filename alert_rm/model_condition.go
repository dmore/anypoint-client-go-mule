/*
 * Alert Runtime Manager
 *
 * Description of the Alert in Runtime Manager API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alert_rm

import (
	"encoding/json"
)

// Condition struct for Condition
type Condition struct {
	Operator string `json:"operator"`
	PeriodCount int32 `json:"periodCount"`
	Value int32 `json:"value"`
	ResourceType string `json:"resourceType"`
	Type string `json:"type"`
	PeriodMins int32 `json:"periodMins"`
	Resources []string `json:"resources"`
}

// NewCondition instantiates a new Condition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCondition(operator string, periodCount int32, value int32, resourceType string, type_ string, periodMins int32, resources []string) *Condition {
	this := Condition{}
	this.Operator = operator
	this.PeriodCount = periodCount
	this.Value = value
	this.ResourceType = resourceType
	this.Type = type_
	this.PeriodMins = periodMins
	this.Resources = resources
	return &this
}

// NewConditionWithDefaults instantiates a new Condition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionWithDefaults() *Condition {
	this := Condition{}
	return &this
}

// GetOperator returns the Operator field value
func (o *Condition) GetOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *Condition) GetOperatorOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *Condition) SetOperator(v string) {
	o.Operator = v
}

// GetPeriodCount returns the PeriodCount field value
func (o *Condition) GetPeriodCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PeriodCount
}

// GetPeriodCountOk returns a tuple with the PeriodCount field value
// and a boolean to check if the value has been set.
func (o *Condition) GetPeriodCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PeriodCount, true
}

// SetPeriodCount sets field value
func (o *Condition) SetPeriodCount(v int32) {
	o.PeriodCount = v
}

// GetValue returns the Value field value
func (o *Condition) GetValue() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *Condition) GetValueOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *Condition) SetValue(v int32) {
	o.Value = v
}

// GetResourceType returns the ResourceType field value
func (o *Condition) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *Condition) GetResourceTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *Condition) SetResourceType(v string) {
	o.ResourceType = v
}

// GetType returns the Type field value
func (o *Condition) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Condition) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Condition) SetType(v string) {
	o.Type = v
}

// GetPeriodMins returns the PeriodMins field value
func (o *Condition) GetPeriodMins() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PeriodMins
}

// GetPeriodMinsOk returns a tuple with the PeriodMins field value
// and a boolean to check if the value has been set.
func (o *Condition) GetPeriodMinsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PeriodMins, true
}

// SetPeriodMins sets field value
func (o *Condition) SetPeriodMins(v int32) {
	o.PeriodMins = v
}

// GetResources returns the Resources field value
func (o *Condition) GetResources() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value
// and a boolean to check if the value has been set.
func (o *Condition) GetResourcesOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Resources, true
}

// SetResources sets field value
func (o *Condition) SetResources(v []string) {
	o.Resources = v
}

func (o Condition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["operator"] = o.Operator
	}
	if true {
		toSerialize["periodCount"] = o.PeriodCount
	}
	if true {
		toSerialize["value"] = o.Value
	}
	if true {
		toSerialize["resourceType"] = o.ResourceType
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["periodMins"] = o.PeriodMins
	}
	if true {
		toSerialize["resources"] = o.Resources
	}
	return json.Marshal(toSerialize)
}

type NullableCondition struct {
	value *Condition
	isSet bool
}

func (v NullableCondition) Get() *Condition {
	return v.value
}

func (v *NullableCondition) Set(val *Condition) {
	v.value = val
	v.isSet = true
}

func (v NullableCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCondition(val *Condition) *NullableCondition {
	return &NullableCondition{value: val, isSet: true}
}

func (v NullableCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


