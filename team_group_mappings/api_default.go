/*
 * Team Group Mappings API
 *
 * Description of the Team Group Mappings API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package team_group_mappings

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DefaultApiService DefaultApi service
type DefaultApiService service

type DefaultApiApiOrganizationsOrgIdTeamsTeamIdGroupmappingsGetRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	orgId string
	teamId string
	limit *int32
	offset *int32
}

func (r DefaultApiApiOrganizationsOrgIdTeamsTeamIdGroupmappingsGetRequest) Limit(limit int32) DefaultApiApiOrganizationsOrgIdTeamsTeamIdGroupmappingsGetRequest {
	r.limit = &limit
	return r
}
func (r DefaultApiApiOrganizationsOrgIdTeamsTeamIdGroupmappingsGetRequest) Offset(offset int32) DefaultApiApiOrganizationsOrgIdTeamsTeamIdGroupmappingsGetRequest {
	r.offset = &offset
	return r
}

func (r DefaultApiApiOrganizationsOrgIdTeamsTeamIdGroupmappingsGetRequest) Execute() (TeamGroupMappingsCollection, *_nethttp.Response, error) {
	return r.ApiService.OrganizationsOrgIdTeamsTeamIdGroupmappingsGetExecute(r)
}

/*
 * OrganizationsOrgIdTeamsTeamIdGroupmappingsGet Method for OrganizationsOrgIdTeamsTeamIdGroupmappingsGet
 * retrieves team groupmappings
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orgId The ID of the organization in GUID format
 * @param teamId The ID of the team in GUID format
 * @return DefaultApiApiOrganizationsOrgIdTeamsTeamIdGroupmappingsGetRequest
 */
func (a *DefaultApiService) OrganizationsOrgIdTeamsTeamIdGroupmappingsGet(ctx _context.Context, orgId string, teamId string) DefaultApiApiOrganizationsOrgIdTeamsTeamIdGroupmappingsGetRequest {
	return DefaultApiApiOrganizationsOrgIdTeamsTeamIdGroupmappingsGetRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		teamId: teamId,
	}
}

/*
 * Execute executes the request
 * @return TeamGroupMappingsCollection
 */
func (a *DefaultApiService) OrganizationsOrgIdTeamsTeamIdGroupmappingsGetExecute(r DefaultApiApiOrganizationsOrgIdTeamsTeamIdGroupmappingsGetRequest) (TeamGroupMappingsCollection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TeamGroupMappingsCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdTeamsTeamIdGroupmappingsGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/teams/{teamId}/groupmappings"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", _neturl.PathEscape(parameterToString(r.orgId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamId"+"}", _neturl.PathEscape(parameterToString(r.teamId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiApiOrganizationsOrgIdTeamsTeamIdGroupmappingsPutRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	orgId string
	teamId string
	teamGroupMappingsPutBody *TeamGroupMappingsPutBody
}

func (r DefaultApiApiOrganizationsOrgIdTeamsTeamIdGroupmappingsPutRequest) TeamGroupMappingsPutBody(teamGroupMappingsPutBody TeamGroupMappingsPutBody) DefaultApiApiOrganizationsOrgIdTeamsTeamIdGroupmappingsPutRequest {
	r.teamGroupMappingsPutBody = &teamGroupMappingsPutBody
	return r
}

func (r DefaultApiApiOrganizationsOrgIdTeamsTeamIdGroupmappingsPutRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.OrganizationsOrgIdTeamsTeamIdGroupmappingsPutExecute(r)
}

/*
 * OrganizationsOrgIdTeamsTeamIdGroupmappingsPut Method for OrganizationsOrgIdTeamsTeamIdGroupmappingsPut
 * adds the given group mappings to the given team
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orgId The ID of the organization in GUID format
 * @param teamId The ID of the team in GUID format
 * @return DefaultApiApiOrganizationsOrgIdTeamsTeamIdGroupmappingsPutRequest
 */
func (a *DefaultApiService) OrganizationsOrgIdTeamsTeamIdGroupmappingsPut(ctx _context.Context, orgId string, teamId string) DefaultApiApiOrganizationsOrgIdTeamsTeamIdGroupmappingsPutRequest {
	return DefaultApiApiOrganizationsOrgIdTeamsTeamIdGroupmappingsPutRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		teamId: teamId,
	}
}

/*
 * Execute executes the request
 */
func (a *DefaultApiService) OrganizationsOrgIdTeamsTeamIdGroupmappingsPutExecute(r DefaultApiApiOrganizationsOrgIdTeamsTeamIdGroupmappingsPutRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdTeamsTeamIdGroupmappingsPut")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/teams/{teamId}/groupmappings"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", _neturl.PathEscape(parameterToString(r.orgId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamId"+"}", _neturl.PathEscape(parameterToString(r.teamId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.teamGroupMappingsPutBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
