/*
 * Alert Runtime Manager
 *
 * Description of the Alert in Runtime Manager API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rm_alerts

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DefaultApiService DefaultApi service
type DefaultApiService service

type DefaultApiApiAlertsAlertIdDeleteRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	alertId string
}


func (r DefaultApiApiAlertsAlertIdDeleteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AlertsAlertIdDeleteExecute(r)
}

/*
 * AlertsAlertIdDelete Delete a specific alert
 * Delete alert using its Id
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param alertId the alert Id
 * @return DefaultApiApiAlertsAlertIdDeleteRequest
 */
func (a *DefaultApiService) AlertsAlertIdDelete(ctx _context.Context, alertId string) DefaultApiApiAlertsAlertIdDeleteRequest {
	return DefaultApiApiAlertsAlertIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		alertId: alertId,
	}
}

/*
 * Execute executes the request
 */
func (a *DefaultApiService) AlertsAlertIdDeleteExecute(r DefaultApiApiAlertsAlertIdDeleteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.AlertsAlertIdDelete")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/alerts/{alertId}"
	localVarPath = strings.Replace(localVarPath, "{"+"alertId"+"}", _neturl.PathEscape(parameterToString(r.alertId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DefaultApiApiAlertsAlertIdGetRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	alertId string
}


func (r DefaultApiApiAlertsAlertIdGetRequest) Execute() ([]Alert, *_nethttp.Response, error) {
	return r.ApiService.AlertsAlertIdGetExecute(r)
}

/*
 * AlertsAlertIdGet Get one specific alert
 * Get one specific alert
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param alertId the alert Id
 * @return DefaultApiApiAlertsAlertIdGetRequest
 */
func (a *DefaultApiService) AlertsAlertIdGet(ctx _context.Context, alertId string) DefaultApiApiAlertsAlertIdGetRequest {
	return DefaultApiApiAlertsAlertIdGetRequest{
		ApiService: a,
		ctx: ctx,
		alertId: alertId,
	}
}

/*
 * Execute executes the request
 * @return []Alert
 */
func (a *DefaultApiService) AlertsAlertIdGetExecute(r DefaultApiApiAlertsAlertIdGetRequest) ([]Alert, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []Alert
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.AlertsAlertIdGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/alerts/{alertId}"
	localVarPath = strings.Replace(localVarPath, "{"+"alertId"+"}", _neturl.PathEscape(parameterToString(r.alertId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiApiAlertsGetRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	xANYPNTENVID *string
	offset *int32
	limit *int32
	resource *string
}

func (r DefaultApiApiAlertsGetRequest) XANYPNTENVID(xANYPNTENVID string) DefaultApiApiAlertsGetRequest {
	r.xANYPNTENVID = &xANYPNTENVID
	return r
}
func (r DefaultApiApiAlertsGetRequest) Offset(offset int32) DefaultApiApiAlertsGetRequest {
	r.offset = &offset
	return r
}
func (r DefaultApiApiAlertsGetRequest) Limit(limit int32) DefaultApiApiAlertsGetRequest {
	r.limit = &limit
	return r
}
func (r DefaultApiApiAlertsGetRequest) Resource(resource string) DefaultApiApiAlertsGetRequest {
	r.resource = &resource
	return r
}

func (r DefaultApiApiAlertsGetRequest) Execute() ([]Alert, *_nethttp.Response, error) {
	return r.ApiService.AlertsGetExecute(r)
}

/*
 * AlertsGet Get all alets for a given environment.
 * Retrieve all alerts in the specified environment. Requires 'Read Alerts' role.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return DefaultApiApiAlertsGetRequest
 */
func (a *DefaultApiService) AlertsGet(ctx _context.Context) DefaultApiApiAlertsGetRequest {
	return DefaultApiApiAlertsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return []Alert
 */
func (a *DefaultApiService) AlertsGetExecute(r DefaultApiApiAlertsGetRequest) ([]Alert, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []Alert
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.AlertsGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/alerts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xANYPNTENVID == nil {
		return localVarReturnValue, nil, reportError("xANYPNTENVID is required and must be specified")
	}

	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.resource != nil {
		localVarQueryParams.Add("resource", parameterToString(*r.resource, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-ANYPNT-ENV-ID"] = parameterToString(*r.xANYPNTENVID, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiApiAlertsPostRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	alertBody *AlertBody
	xANYPNTENVID *string
}

func (r DefaultApiApiAlertsPostRequest) AlertBody(alertBody AlertBody) DefaultApiApiAlertsPostRequest {
	r.alertBody = &alertBody
	return r
}
func (r DefaultApiApiAlertsPostRequest) XANYPNTENVID(xANYPNTENVID string) DefaultApiApiAlertsPostRequest {
	r.xANYPNTENVID = &xANYPNTENVID
	return r
}

func (r DefaultApiApiAlertsPostRequest) Execute() (Alert, *_nethttp.Response, error) {
	return r.ApiService.AlertsPostExecute(r)
}

/*
 * AlertsPost Method for AlertsPost
 * Create a new Alert
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return DefaultApiApiAlertsPostRequest
 */
func (a *DefaultApiService) AlertsPost(ctx _context.Context) DefaultApiApiAlertsPostRequest {
	return DefaultApiApiAlertsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return Alert
 */
func (a *DefaultApiService) AlertsPostExecute(r DefaultApiApiAlertsPostRequest) (Alert, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Alert
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.AlertsPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/alerts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.alertBody == nil {
		return localVarReturnValue, nil, reportError("alertBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xANYPNTENVID != nil {
		localVarHeaderParams["X-ANYPNT-ENV-ID"] = parameterToString(*r.xANYPNTENVID, "")
	}
	// body params
	localVarPostBody = r.alertBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiApiModifyOneAlertRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	alertId string
	alertBody *AlertBody
}

func (r DefaultApiApiModifyOneAlertRequest) AlertBody(alertBody AlertBody) DefaultApiApiModifyOneAlertRequest {
	r.alertBody = &alertBody
	return r
}

func (r DefaultApiApiModifyOneAlertRequest) Execute() (Alert, *_nethttp.Response, error) {
	return r.ApiService.ModifyOneAlertExecute(r)
}

/*
 * ModifyOneAlert Method for ModifyOneAlert
 * Modify one alert
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param alertId the alert Id
 * @return DefaultApiApiModifyOneAlertRequest
 */
func (a *DefaultApiService) ModifyOneAlert(ctx _context.Context, alertId string) DefaultApiApiModifyOneAlertRequest {
	return DefaultApiApiModifyOneAlertRequest{
		ApiService: a,
		ctx: ctx,
		alertId: alertId,
	}
}

/*
 * Execute executes the request
 * @return Alert
 */
func (a *DefaultApiService) ModifyOneAlertExecute(r DefaultApiApiModifyOneAlertRequest) (Alert, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Alert
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyOneAlert")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/alerts/{alertId}"
	localVarPath = strings.Replace(localVarPath, "{"+"alertId"+"}", _neturl.PathEscape(parameterToString(r.alertId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alertBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
