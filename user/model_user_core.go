/*
 * User API
 *
 * Description of the User API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package user

import (
	"encoding/json"
)

// UserCore struct for UserCore
type UserCore struct {
	Username *string `json:"username,omitempty"`
	FirstName *string `json:"firstName,omitempty"`
	LastName *string `json:"lastName,omitempty"`
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	Email *string `json:"email,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	LastLogin *string `json:"lastLogin,omitempty"`
	MfaVerificationExcluded *bool `json:"mfaVerificationExcluded,omitempty"`
	MfaVerifiersConfigured *bool `json:"mfaVerifiersConfigured,omitempty"`
	IdproviderId *string `json:"idprovider_id,omitempty"`
	CreatedAt *string `json:"createdAt,omitempty"`
	UpdatedAt *string `json:"updatedAt,omitempty"`
	IsFederated *bool `json:"isFederated,omitempty"`
	Type *string `json:"type,omitempty"`
	Organization *Organization `json:"organization,omitempty"`
	MemberOfOrganizations *[]Org `json:"memberOfOrganizations,omitempty"`
	ContributorOfOrganizations *[]Org `json:"contributorOfOrganizations,omitempty"`
	Properties *Properties `json:"properties,omitempty"`
	OrganizationPreferences *map[string]interface{} `json:"organizationPreferences,omitempty"`
	PrimaryOrganization *PrimaryOrganization `json:"primaryOrganization,omitempty"`
}

// NewUserCore instantiates a new UserCore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserCore() *UserCore {
	this := UserCore{}
	var lastName string = "Mule"
	this.LastName = &lastName
	return &this
}

// NewUserCoreWithDefaults instantiates a new UserCore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserCoreWithDefaults() *UserCore {
	this := UserCore{}
	var lastName string = "Mule"
	this.LastName = &lastName
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UserCore) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCore) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *UserCore) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UserCore) SetUsername(v string) {
	o.Username = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *UserCore) GetFirstName() string {
	if o == nil || o.FirstName == nil {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCore) GetFirstNameOk() (*string, bool) {
	if o == nil || o.FirstName == nil {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *UserCore) HasFirstName() bool {
	if o != nil && o.FirstName != nil {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *UserCore) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *UserCore) GetLastName() string {
	if o == nil || o.LastName == nil {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCore) GetLastNameOk() (*string, bool) {
	if o == nil || o.LastName == nil {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *UserCore) HasLastName() bool {
	if o != nil && o.LastName != nil {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *UserCore) SetLastName(v string) {
	o.LastName = &v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *UserCore) GetPhoneNumber() string {
	if o == nil || o.PhoneNumber == nil {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCore) GetPhoneNumberOk() (*string, bool) {
	if o == nil || o.PhoneNumber == nil {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *UserCore) HasPhoneNumber() bool {
	if o != nil && o.PhoneNumber != nil {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *UserCore) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UserCore) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCore) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UserCore) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UserCore) SetEmail(v string) {
	o.Email = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *UserCore) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCore) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *UserCore) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *UserCore) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *UserCore) GetDeleted() bool {
	if o == nil || o.Deleted == nil {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCore) GetDeletedOk() (*bool, bool) {
	if o == nil || o.Deleted == nil {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *UserCore) HasDeleted() bool {
	if o != nil && o.Deleted != nil {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *UserCore) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetLastLogin returns the LastLogin field value if set, zero value otherwise.
func (o *UserCore) GetLastLogin() string {
	if o == nil || o.LastLogin == nil {
		var ret string
		return ret
	}
	return *o.LastLogin
}

// GetLastLoginOk returns a tuple with the LastLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCore) GetLastLoginOk() (*string, bool) {
	if o == nil || o.LastLogin == nil {
		return nil, false
	}
	return o.LastLogin, true
}

// HasLastLogin returns a boolean if a field has been set.
func (o *UserCore) HasLastLogin() bool {
	if o != nil && o.LastLogin != nil {
		return true
	}

	return false
}

// SetLastLogin gets a reference to the given string and assigns it to the LastLogin field.
func (o *UserCore) SetLastLogin(v string) {
	o.LastLogin = &v
}

// GetMfaVerificationExcluded returns the MfaVerificationExcluded field value if set, zero value otherwise.
func (o *UserCore) GetMfaVerificationExcluded() bool {
	if o == nil || o.MfaVerificationExcluded == nil {
		var ret bool
		return ret
	}
	return *o.MfaVerificationExcluded
}

// GetMfaVerificationExcludedOk returns a tuple with the MfaVerificationExcluded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCore) GetMfaVerificationExcludedOk() (*bool, bool) {
	if o == nil || o.MfaVerificationExcluded == nil {
		return nil, false
	}
	return o.MfaVerificationExcluded, true
}

// HasMfaVerificationExcluded returns a boolean if a field has been set.
func (o *UserCore) HasMfaVerificationExcluded() bool {
	if o != nil && o.MfaVerificationExcluded != nil {
		return true
	}

	return false
}

// SetMfaVerificationExcluded gets a reference to the given bool and assigns it to the MfaVerificationExcluded field.
func (o *UserCore) SetMfaVerificationExcluded(v bool) {
	o.MfaVerificationExcluded = &v
}

// GetMfaVerifiersConfigured returns the MfaVerifiersConfigured field value if set, zero value otherwise.
func (o *UserCore) GetMfaVerifiersConfigured() bool {
	if o == nil || o.MfaVerifiersConfigured == nil {
		var ret bool
		return ret
	}
	return *o.MfaVerifiersConfigured
}

// GetMfaVerifiersConfiguredOk returns a tuple with the MfaVerifiersConfigured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCore) GetMfaVerifiersConfiguredOk() (*bool, bool) {
	if o == nil || o.MfaVerifiersConfigured == nil {
		return nil, false
	}
	return o.MfaVerifiersConfigured, true
}

// HasMfaVerifiersConfigured returns a boolean if a field has been set.
func (o *UserCore) HasMfaVerifiersConfigured() bool {
	if o != nil && o.MfaVerifiersConfigured != nil {
		return true
	}

	return false
}

// SetMfaVerifiersConfigured gets a reference to the given bool and assigns it to the MfaVerifiersConfigured field.
func (o *UserCore) SetMfaVerifiersConfigured(v bool) {
	o.MfaVerifiersConfigured = &v
}

// GetIdproviderId returns the IdproviderId field value if set, zero value otherwise.
func (o *UserCore) GetIdproviderId() string {
	if o == nil || o.IdproviderId == nil {
		var ret string
		return ret
	}
	return *o.IdproviderId
}

// GetIdproviderIdOk returns a tuple with the IdproviderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCore) GetIdproviderIdOk() (*string, bool) {
	if o == nil || o.IdproviderId == nil {
		return nil, false
	}
	return o.IdproviderId, true
}

// HasIdproviderId returns a boolean if a field has been set.
func (o *UserCore) HasIdproviderId() bool {
	if o != nil && o.IdproviderId != nil {
		return true
	}

	return false
}

// SetIdproviderId gets a reference to the given string and assigns it to the IdproviderId field.
func (o *UserCore) SetIdproviderId(v string) {
	o.IdproviderId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *UserCore) GetCreatedAt() string {
	if o == nil || o.CreatedAt == nil {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCore) GetCreatedAtOk() (*string, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *UserCore) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *UserCore) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *UserCore) GetUpdatedAt() string {
	if o == nil || o.UpdatedAt == nil {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCore) GetUpdatedAtOk() (*string, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *UserCore) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *UserCore) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetIsFederated returns the IsFederated field value if set, zero value otherwise.
func (o *UserCore) GetIsFederated() bool {
	if o == nil || o.IsFederated == nil {
		var ret bool
		return ret
	}
	return *o.IsFederated
}

// GetIsFederatedOk returns a tuple with the IsFederated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCore) GetIsFederatedOk() (*bool, bool) {
	if o == nil || o.IsFederated == nil {
		return nil, false
	}
	return o.IsFederated, true
}

// HasIsFederated returns a boolean if a field has been set.
func (o *UserCore) HasIsFederated() bool {
	if o != nil && o.IsFederated != nil {
		return true
	}

	return false
}

// SetIsFederated gets a reference to the given bool and assigns it to the IsFederated field.
func (o *UserCore) SetIsFederated(v bool) {
	o.IsFederated = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UserCore) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCore) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UserCore) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UserCore) SetType(v string) {
	o.Type = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *UserCore) GetOrganization() Organization {
	if o == nil || o.Organization == nil {
		var ret Organization
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCore) GetOrganizationOk() (*Organization, bool) {
	if o == nil || o.Organization == nil {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *UserCore) HasOrganization() bool {
	if o != nil && o.Organization != nil {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given Organization and assigns it to the Organization field.
func (o *UserCore) SetOrganization(v Organization) {
	o.Organization = &v
}

// GetMemberOfOrganizations returns the MemberOfOrganizations field value if set, zero value otherwise.
func (o *UserCore) GetMemberOfOrganizations() []Org {
	if o == nil || o.MemberOfOrganizations == nil {
		var ret []Org
		return ret
	}
	return *o.MemberOfOrganizations
}

// GetMemberOfOrganizationsOk returns a tuple with the MemberOfOrganizations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCore) GetMemberOfOrganizationsOk() (*[]Org, bool) {
	if o == nil || o.MemberOfOrganizations == nil {
		return nil, false
	}
	return o.MemberOfOrganizations, true
}

// HasMemberOfOrganizations returns a boolean if a field has been set.
func (o *UserCore) HasMemberOfOrganizations() bool {
	if o != nil && o.MemberOfOrganizations != nil {
		return true
	}

	return false
}

// SetMemberOfOrganizations gets a reference to the given []Org and assigns it to the MemberOfOrganizations field.
func (o *UserCore) SetMemberOfOrganizations(v []Org) {
	o.MemberOfOrganizations = &v
}

// GetContributorOfOrganizations returns the ContributorOfOrganizations field value if set, zero value otherwise.
func (o *UserCore) GetContributorOfOrganizations() []Org {
	if o == nil || o.ContributorOfOrganizations == nil {
		var ret []Org
		return ret
	}
	return *o.ContributorOfOrganizations
}

// GetContributorOfOrganizationsOk returns a tuple with the ContributorOfOrganizations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCore) GetContributorOfOrganizationsOk() (*[]Org, bool) {
	if o == nil || o.ContributorOfOrganizations == nil {
		return nil, false
	}
	return o.ContributorOfOrganizations, true
}

// HasContributorOfOrganizations returns a boolean if a field has been set.
func (o *UserCore) HasContributorOfOrganizations() bool {
	if o != nil && o.ContributorOfOrganizations != nil {
		return true
	}

	return false
}

// SetContributorOfOrganizations gets a reference to the given []Org and assigns it to the ContributorOfOrganizations field.
func (o *UserCore) SetContributorOfOrganizations(v []Org) {
	o.ContributorOfOrganizations = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *UserCore) GetProperties() Properties {
	if o == nil || o.Properties == nil {
		var ret Properties
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCore) GetPropertiesOk() (*Properties, bool) {
	if o == nil || o.Properties == nil {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *UserCore) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

// SetProperties gets a reference to the given Properties and assigns it to the Properties field.
func (o *UserCore) SetProperties(v Properties) {
	o.Properties = &v
}

// GetOrganizationPreferences returns the OrganizationPreferences field value if set, zero value otherwise.
func (o *UserCore) GetOrganizationPreferences() map[string]interface{} {
	if o == nil || o.OrganizationPreferences == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.OrganizationPreferences
}

// GetOrganizationPreferencesOk returns a tuple with the OrganizationPreferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCore) GetOrganizationPreferencesOk() (*map[string]interface{}, bool) {
	if o == nil || o.OrganizationPreferences == nil {
		return nil, false
	}
	return o.OrganizationPreferences, true
}

// HasOrganizationPreferences returns a boolean if a field has been set.
func (o *UserCore) HasOrganizationPreferences() bool {
	if o != nil && o.OrganizationPreferences != nil {
		return true
	}

	return false
}

// SetOrganizationPreferences gets a reference to the given map[string]interface{} and assigns it to the OrganizationPreferences field.
func (o *UserCore) SetOrganizationPreferences(v map[string]interface{}) {
	o.OrganizationPreferences = &v
}

// GetPrimaryOrganization returns the PrimaryOrganization field value if set, zero value otherwise.
func (o *UserCore) GetPrimaryOrganization() PrimaryOrganization {
	if o == nil || o.PrimaryOrganization == nil {
		var ret PrimaryOrganization
		return ret
	}
	return *o.PrimaryOrganization
}

// GetPrimaryOrganizationOk returns a tuple with the PrimaryOrganization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCore) GetPrimaryOrganizationOk() (*PrimaryOrganization, bool) {
	if o == nil || o.PrimaryOrganization == nil {
		return nil, false
	}
	return o.PrimaryOrganization, true
}

// HasPrimaryOrganization returns a boolean if a field has been set.
func (o *UserCore) HasPrimaryOrganization() bool {
	if o != nil && o.PrimaryOrganization != nil {
		return true
	}

	return false
}

// SetPrimaryOrganization gets a reference to the given PrimaryOrganization and assigns it to the PrimaryOrganization field.
func (o *UserCore) SetPrimaryOrganization(v PrimaryOrganization) {
	o.PrimaryOrganization = &v
}

func (o UserCore) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	if o.FirstName != nil {
		toSerialize["firstName"] = o.FirstName
	}
	if o.LastName != nil {
		toSerialize["lastName"] = o.LastName
	}
	if o.PhoneNumber != nil {
		toSerialize["phoneNumber"] = o.PhoneNumber
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Deleted != nil {
		toSerialize["deleted"] = o.Deleted
	}
	if o.LastLogin != nil {
		toSerialize["lastLogin"] = o.LastLogin
	}
	if o.MfaVerificationExcluded != nil {
		toSerialize["mfaVerificationExcluded"] = o.MfaVerificationExcluded
	}
	if o.MfaVerifiersConfigured != nil {
		toSerialize["mfaVerifiersConfigured"] = o.MfaVerifiersConfigured
	}
	if o.IdproviderId != nil {
		toSerialize["idprovider_id"] = o.IdproviderId
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if o.IsFederated != nil {
		toSerialize["isFederated"] = o.IsFederated
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Organization != nil {
		toSerialize["organization"] = o.Organization
	}
	if o.MemberOfOrganizations != nil {
		toSerialize["memberOfOrganizations"] = o.MemberOfOrganizations
	}
	if o.ContributorOfOrganizations != nil {
		toSerialize["contributorOfOrganizations"] = o.ContributorOfOrganizations
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	if o.OrganizationPreferences != nil {
		toSerialize["organizationPreferences"] = o.OrganizationPreferences
	}
	if o.PrimaryOrganization != nil {
		toSerialize["primaryOrganization"] = o.PrimaryOrganization
	}
	return json.Marshal(toSerialize)
}

type NullableUserCore struct {
	value *UserCore
	isSet bool
}

func (v NullableUserCore) Get() *UserCore {
	return v.value
}

func (v *NullableUserCore) Set(val *UserCore) {
	v.value = val
	v.isSet = true
}

func (v NullableUserCore) IsSet() bool {
	return v.isSet
}

func (v *NullableUserCore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserCore(val *UserCore) *NullableUserCore {
	return &NullableUserCore{value: val, isSet: true}
}

func (v NullableUserCore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserCore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


