/*
 * User API
 *
 * Description of the User API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package user

import (
	"encoding/json"
)

// UserCore struct for UserCore
type UserCore struct {
	Username *string `json:"username,omitempty"`
	FirstName *string `json:"firstName,omitempty"`
	LastName *string `json:"lastName,omitempty"`
	Email *string `json:"email,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	IdproviderId *string `json:"idprovider_id,omitempty"`
	CreatedAt *string `json:"createdAt,omitempty"`
	UpdatedAt *string `json:"updatedAt,omitempty"`
	IsApiConsumer *bool `json:"isApiConsumer,omitempty"`
}

// NewUserCore instantiates a new UserCore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserCore() *UserCore {
	this := UserCore{}
	var lastName string = "Mule"
	this.LastName = &lastName
	return &this
}

// NewUserCoreWithDefaults instantiates a new UserCore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserCoreWithDefaults() *UserCore {
	this := UserCore{}
	var lastName string = "Mule"
	this.LastName = &lastName
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UserCore) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCore) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *UserCore) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UserCore) SetUsername(v string) {
	o.Username = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *UserCore) GetFirstName() string {
	if o == nil || o.FirstName == nil {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCore) GetFirstNameOk() (*string, bool) {
	if o == nil || o.FirstName == nil {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *UserCore) HasFirstName() bool {
	if o != nil && o.FirstName != nil {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *UserCore) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *UserCore) GetLastName() string {
	if o == nil || o.LastName == nil {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCore) GetLastNameOk() (*string, bool) {
	if o == nil || o.LastName == nil {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *UserCore) HasLastName() bool {
	if o != nil && o.LastName != nil {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *UserCore) SetLastName(v string) {
	o.LastName = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UserCore) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCore) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UserCore) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UserCore) SetEmail(v string) {
	o.Email = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *UserCore) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCore) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *UserCore) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *UserCore) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetIdproviderId returns the IdproviderId field value if set, zero value otherwise.
func (o *UserCore) GetIdproviderId() string {
	if o == nil || o.IdproviderId == nil {
		var ret string
		return ret
	}
	return *o.IdproviderId
}

// GetIdproviderIdOk returns a tuple with the IdproviderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCore) GetIdproviderIdOk() (*string, bool) {
	if o == nil || o.IdproviderId == nil {
		return nil, false
	}
	return o.IdproviderId, true
}

// HasIdproviderId returns a boolean if a field has been set.
func (o *UserCore) HasIdproviderId() bool {
	if o != nil && o.IdproviderId != nil {
		return true
	}

	return false
}

// SetIdproviderId gets a reference to the given string and assigns it to the IdproviderId field.
func (o *UserCore) SetIdproviderId(v string) {
	o.IdproviderId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *UserCore) GetCreatedAt() string {
	if o == nil || o.CreatedAt == nil {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCore) GetCreatedAtOk() (*string, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *UserCore) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *UserCore) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *UserCore) GetUpdatedAt() string {
	if o == nil || o.UpdatedAt == nil {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCore) GetUpdatedAtOk() (*string, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *UserCore) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *UserCore) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetIsApiConsumer returns the IsApiConsumer field value if set, zero value otherwise.
func (o *UserCore) GetIsApiConsumer() bool {
	if o == nil || o.IsApiConsumer == nil {
		var ret bool
		return ret
	}
	return *o.IsApiConsumer
}

// GetIsApiConsumerOk returns a tuple with the IsApiConsumer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCore) GetIsApiConsumerOk() (*bool, bool) {
	if o == nil || o.IsApiConsumer == nil {
		return nil, false
	}
	return o.IsApiConsumer, true
}

// HasIsApiConsumer returns a boolean if a field has been set.
func (o *UserCore) HasIsApiConsumer() bool {
	if o != nil && o.IsApiConsumer != nil {
		return true
	}

	return false
}

// SetIsApiConsumer gets a reference to the given bool and assigns it to the IsApiConsumer field.
func (o *UserCore) SetIsApiConsumer(v bool) {
	o.IsApiConsumer = &v
}

func (o UserCore) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	if o.FirstName != nil {
		toSerialize["firstName"] = o.FirstName
	}
	if o.LastName != nil {
		toSerialize["lastName"] = o.LastName
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.IdproviderId != nil {
		toSerialize["idprovider_id"] = o.IdproviderId
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if o.IsApiConsumer != nil {
		toSerialize["isApiConsumer"] = o.IsApiConsumer
	}
	return json.Marshal(toSerialize)
}

type NullableUserCore struct {
	value *UserCore
	isSet bool
}

func (v NullableUserCore) Get() *UserCore {
	return v.value
}

func (v *NullableUserCore) Set(val *UserCore) {
	v.value = val
	v.isSet = true
}

func (v NullableUserCore) IsSet() bool {
	return v.isSet
}

func (v *NullableUserCore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserCore(val *UserCore) *NullableUserCore {
	return &NullableUserCore{value: val, isSet: true}
}

func (v NullableUserCore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserCore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


