/*
 * Identity Provider Management API
 *
 * Description of Identity Provider API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package idp

import (
	"encoding/json"
)

// ClaimsMapping1 struct for ClaimsMapping1
type ClaimsMapping1 struct {
	GroupExpression *string `json:"group_expression,omitempty"`
}

// NewClaimsMapping1 instantiates a new ClaimsMapping1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClaimsMapping1() *ClaimsMapping1 {
	this := ClaimsMapping1{}
	return &this
}

// NewClaimsMapping1WithDefaults instantiates a new ClaimsMapping1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClaimsMapping1WithDefaults() *ClaimsMapping1 {
	this := ClaimsMapping1{}
	return &this
}

// GetGroupExpression returns the GroupExpression field value if set, zero value otherwise.
func (o *ClaimsMapping1) GetGroupExpression() string {
	if o == nil || o.GroupExpression == nil {
		var ret string
		return ret
	}
	return *o.GroupExpression
}

// GetGroupExpressionOk returns a tuple with the GroupExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimsMapping1) GetGroupExpressionOk() (*string, bool) {
	if o == nil || o.GroupExpression == nil {
		return nil, false
	}
	return o.GroupExpression, true
}

// HasGroupExpression returns a boolean if a field has been set.
func (o *ClaimsMapping1) HasGroupExpression() bool {
	if o != nil && o.GroupExpression != nil {
		return true
	}

	return false
}

// SetGroupExpression gets a reference to the given string and assigns it to the GroupExpression field.
func (o *ClaimsMapping1) SetGroupExpression(v string) {
	o.GroupExpression = &v
}

func (o ClaimsMapping1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.GroupExpression != nil {
		toSerialize["group_expression"] = o.GroupExpression
	}
	return json.Marshal(toSerialize)
}

type NullableClaimsMapping1 struct {
	value *ClaimsMapping1
	isSet bool
}

func (v NullableClaimsMapping1) Get() *ClaimsMapping1 {
	return v.value
}

func (v *NullableClaimsMapping1) Set(val *ClaimsMapping1) {
	v.value = val
	v.isSet = true
}

func (v NullableClaimsMapping1) IsSet() bool {
	return v.isSet
}

func (v *NullableClaimsMapping1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClaimsMapping1(val *ClaimsMapping1) *NullableClaimsMapping1 {
	return &NullableClaimsMapping1{value: val, isSet: true}
}

func (v NullableClaimsMapping1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClaimsMapping1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


