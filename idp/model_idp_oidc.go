/*
 * Identity Provider Management API
 *
 * Description of Identity Provider API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package idp

import (
	"encoding/json"
)

// IdpOIDC struct for IdpOIDC
type IdpOIDC struct {
	AllowUntrustedCertificates *bool `json:"allow_untrusted_certificates,omitempty"`
	OidcProvider *OidcProvider `json:"oidc_provider,omitempty"`
}

// NewIdpOIDC instantiates a new IdpOIDC object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdpOIDC() *IdpOIDC {
	this := IdpOIDC{}
	return &this
}

// NewIdpOIDCWithDefaults instantiates a new IdpOIDC object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdpOIDCWithDefaults() *IdpOIDC {
	this := IdpOIDC{}
	return &this
}

// GetAllowUntrustedCertificates returns the AllowUntrustedCertificates field value if set, zero value otherwise.
func (o *IdpOIDC) GetAllowUntrustedCertificates() bool {
	if o == nil || o.AllowUntrustedCertificates == nil {
		var ret bool
		return ret
	}
	return *o.AllowUntrustedCertificates
}

// GetAllowUntrustedCertificatesOk returns a tuple with the AllowUntrustedCertificates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpOIDC) GetAllowUntrustedCertificatesOk() (*bool, bool) {
	if o == nil || o.AllowUntrustedCertificates == nil {
		return nil, false
	}
	return o.AllowUntrustedCertificates, true
}

// HasAllowUntrustedCertificates returns a boolean if a field has been set.
func (o *IdpOIDC) HasAllowUntrustedCertificates() bool {
	if o != nil && o.AllowUntrustedCertificates != nil {
		return true
	}

	return false
}

// SetAllowUntrustedCertificates gets a reference to the given bool and assigns it to the AllowUntrustedCertificates field.
func (o *IdpOIDC) SetAllowUntrustedCertificates(v bool) {
	o.AllowUntrustedCertificates = &v
}

// GetOidcProvider returns the OidcProvider field value if set, zero value otherwise.
func (o *IdpOIDC) GetOidcProvider() OidcProvider {
	if o == nil || o.OidcProvider == nil {
		var ret OidcProvider
		return ret
	}
	return *o.OidcProvider
}

// GetOidcProviderOk returns a tuple with the OidcProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpOIDC) GetOidcProviderOk() (*OidcProvider, bool) {
	if o == nil || o.OidcProvider == nil {
		return nil, false
	}
	return o.OidcProvider, true
}

// HasOidcProvider returns a boolean if a field has been set.
func (o *IdpOIDC) HasOidcProvider() bool {
	if o != nil && o.OidcProvider != nil {
		return true
	}

	return false
}

// SetOidcProvider gets a reference to the given OidcProvider and assigns it to the OidcProvider field.
func (o *IdpOIDC) SetOidcProvider(v OidcProvider) {
	o.OidcProvider = &v
}

func (o IdpOIDC) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowUntrustedCertificates != nil {
		toSerialize["allow_untrusted_certificates"] = o.AllowUntrustedCertificates
	}
	if o.OidcProvider != nil {
		toSerialize["oidc_provider"] = o.OidcProvider
	}
	return json.Marshal(toSerialize)
}

type NullableIdpOIDC struct {
	value *IdpOIDC
	isSet bool
}

func (v NullableIdpOIDC) Get() *IdpOIDC {
	return v.value
}

func (v *NullableIdpOIDC) Set(val *IdpOIDC) {
	v.value = val
	v.isSet = true
}

func (v NullableIdpOIDC) IsSet() bool {
	return v.isSet
}

func (v *NullableIdpOIDC) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdpOIDC(val *IdpOIDC) *NullableIdpOIDC {
	return &NullableIdpOIDC{value: val, isSet: true}
}

func (v NullableIdpOIDC) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdpOIDC) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


