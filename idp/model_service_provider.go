/*
 * Identity Provider Management API
 *
 * Description of Identity Provider API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package idp

import (
	"encoding/json"
)

// ServiceProvider struct for ServiceProvider
type ServiceProvider struct {
	Urls *Urls1 `json:"urls,omitempty"`
}

// NewServiceProvider instantiates a new ServiceProvider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceProvider() *ServiceProvider {
	this := ServiceProvider{}
	return &this
}

// NewServiceProviderWithDefaults instantiates a new ServiceProvider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceProviderWithDefaults() *ServiceProvider {
	this := ServiceProvider{}
	return &this
}

// GetUrls returns the Urls field value if set, zero value otherwise.
func (o *ServiceProvider) GetUrls() Urls1 {
	if o == nil || o.Urls == nil {
		var ret Urls1
		return ret
	}
	return *o.Urls
}

// GetUrlsOk returns a tuple with the Urls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceProvider) GetUrlsOk() (*Urls1, bool) {
	if o == nil || o.Urls == nil {
		return nil, false
	}
	return o.Urls, true
}

// HasUrls returns a boolean if a field has been set.
func (o *ServiceProvider) HasUrls() bool {
	if o != nil && o.Urls != nil {
		return true
	}

	return false
}

// SetUrls gets a reference to the given Urls1 and assigns it to the Urls field.
func (o *ServiceProvider) SetUrls(v Urls1) {
	o.Urls = &v
}

func (o ServiceProvider) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Urls != nil {
		toSerialize["urls"] = o.Urls
	}
	return json.Marshal(toSerialize)
}

type NullableServiceProvider struct {
	value *ServiceProvider
	isSet bool
}

func (v NullableServiceProvider) Get() *ServiceProvider {
	return v.value
}

func (v *NullableServiceProvider) Set(val *ServiceProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceProvider(val *ServiceProvider) *NullableServiceProvider {
	return &NullableServiceProvider{value: val, isSet: true}
}

func (v NullableServiceProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


