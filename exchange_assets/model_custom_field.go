/*
 * Exchange Assets
 *
 * Description of the Exchange Assets API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package exchange_assets

import (
	"encoding/json"
)

// CustomField struct for CustomField
type CustomField struct {
	DateValue *string `json:"dateValue,omitempty"`
	TextValue *string `json:"textValue,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	DataType *string `json:"dataType,omitempty"`
	Key *string `json:"key,omitempty"`
}

// NewCustomField instantiates a new CustomField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomField() *CustomField {
	this := CustomField{}
	return &this
}

// NewCustomFieldWithDefaults instantiates a new CustomField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomFieldWithDefaults() *CustomField {
	this := CustomField{}
	return &this
}

// GetDateValue returns the DateValue field value if set, zero value otherwise.
func (o *CustomField) GetDateValue() string {
	if o == nil || o.DateValue == nil {
		var ret string
		return ret
	}
	return *o.DateValue
}

// GetDateValueOk returns a tuple with the DateValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomField) GetDateValueOk() (*string, bool) {
	if o == nil || o.DateValue == nil {
		return nil, false
	}
	return o.DateValue, true
}

// HasDateValue returns a boolean if a field has been set.
func (o *CustomField) HasDateValue() bool {
	if o != nil && o.DateValue != nil {
		return true
	}

	return false
}

// SetDateValue gets a reference to the given string and assigns it to the DateValue field.
func (o *CustomField) SetDateValue(v string) {
	o.DateValue = &v
}

// GetTextValue returns the TextValue field value if set, zero value otherwise.
func (o *CustomField) GetTextValue() string {
	if o == nil || o.TextValue == nil {
		var ret string
		return ret
	}
	return *o.TextValue
}

// GetTextValueOk returns a tuple with the TextValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomField) GetTextValueOk() (*string, bool) {
	if o == nil || o.TextValue == nil {
		return nil, false
	}
	return o.TextValue, true
}

// HasTextValue returns a boolean if a field has been set.
func (o *CustomField) HasTextValue() bool {
	if o != nil && o.TextValue != nil {
		return true
	}

	return false
}

// SetTextValue gets a reference to the given string and assigns it to the TextValue field.
func (o *CustomField) SetTextValue(v string) {
	o.TextValue = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *CustomField) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomField) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *CustomField) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *CustomField) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDataType returns the DataType field value if set, zero value otherwise.
func (o *CustomField) GetDataType() string {
	if o == nil || o.DataType == nil {
		var ret string
		return ret
	}
	return *o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomField) GetDataTypeOk() (*string, bool) {
	if o == nil || o.DataType == nil {
		return nil, false
	}
	return o.DataType, true
}

// HasDataType returns a boolean if a field has been set.
func (o *CustomField) HasDataType() bool {
	if o != nil && o.DataType != nil {
		return true
	}

	return false
}

// SetDataType gets a reference to the given string and assigns it to the DataType field.
func (o *CustomField) SetDataType(v string) {
	o.DataType = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *CustomField) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomField) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *CustomField) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *CustomField) SetKey(v string) {
	o.Key = &v
}

func (o CustomField) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DateValue != nil {
		toSerialize["dateValue"] = o.DateValue
	}
	if o.TextValue != nil {
		toSerialize["textValue"] = o.TextValue
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.DataType != nil {
		toSerialize["dataType"] = o.DataType
	}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	return json.Marshal(toSerialize)
}

type NullableCustomField struct {
	value *CustomField
	isSet bool
}

func (v NullableCustomField) Get() *CustomField {
	return v.value
}

func (v *NullableCustomField) Set(val *CustomField) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomField) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomField(val *CustomField) *NullableCustomField {
	return &NullableCustomField{value: val, isSet: true}
}

func (v NullableCustomField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


