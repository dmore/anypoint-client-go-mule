/*
 * Exchange Assets
 *
 * Description of the Exchange Assets API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package exchange_assets

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"os"
)

// Linger please
var (
	_ _context.Context
)

// DefaultApiService DefaultApi service
type DefaultApiService service

type DefaultApiApiAssetsOrgIdAssetIdAssetGetRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	orgId string
	assetId string
}


func (r DefaultApiApiAssetsOrgIdAssetIdAssetGetRequest) Execute() (Asset, *_nethttp.Response, error) {
	return r.ApiService.AssetsOrgIdAssetIdAssetGetExecute(r)
}

/*
 * AssetsOrgIdAssetIdAssetGet Get one specific Asset
 * Get one specific Asset
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orgId The ID of the organization in GUID format
 * @param assetId The ID of the asset
 * @return DefaultApiApiAssetsOrgIdAssetIdAssetGetRequest
 */
func (a *DefaultApiService) AssetsOrgIdAssetIdAssetGet(ctx _context.Context, orgId string, assetId string) DefaultApiApiAssetsOrgIdAssetIdAssetGetRequest {
	return DefaultApiApiAssetsOrgIdAssetIdAssetGetRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		assetId: assetId,
	}
}

/*
 * Execute executes the request
 * @return Asset
 */
func (a *DefaultApiService) AssetsOrgIdAssetIdAssetGetExecute(r DefaultApiApiAssetsOrgIdAssetIdAssetGetRequest) (Asset, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Asset
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.AssetsOrgIdAssetIdAssetGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/assets/{orgId}/{assetId}/asset"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", _neturl.PathEscape(parameterToString(r.orgId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"assetId"+"}", _neturl.PathEscape(parameterToString(r.assetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiApiAssetsOrgIdAssetIdPatchRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	orgId string
	assetId string
	patchAssetNameAndDescr *PatchAssetNameAndDescr
}

func (r DefaultApiApiAssetsOrgIdAssetIdPatchRequest) PatchAssetNameAndDescr(patchAssetNameAndDescr PatchAssetNameAndDescr) DefaultApiApiAssetsOrgIdAssetIdPatchRequest {
	r.patchAssetNameAndDescr = &patchAssetNameAndDescr
	return r
}

func (r DefaultApiApiAssetsOrgIdAssetIdPatchRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AssetsOrgIdAssetIdPatchExecute(r)
}

/*
 * AssetsOrgIdAssetIdPatch update Asset name and description
 * Modify an asset
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orgId The ID of the organization in GUID format
 * @param assetId The ID of the asset
 * @return DefaultApiApiAssetsOrgIdAssetIdPatchRequest
 */
func (a *DefaultApiService) AssetsOrgIdAssetIdPatch(ctx _context.Context, orgId string, assetId string) DefaultApiApiAssetsOrgIdAssetIdPatchRequest {
	return DefaultApiApiAssetsOrgIdAssetIdPatchRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		assetId: assetId,
	}
}

/*
 * Execute executes the request
 */
func (a *DefaultApiService) AssetsOrgIdAssetIdPatchExecute(r DefaultApiApiAssetsOrgIdAssetIdPatchRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.AssetsOrgIdAssetIdPatch")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/assets/{orgId}/{assetId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", _neturl.PathEscape(parameterToString(r.orgId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"assetId"+"}", _neturl.PathEscape(parameterToString(r.assetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/plain"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchAssetNameAndDescr
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DefaultApiApiAssetsOrgIdAssetIdVersionDeleteRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	orgId string
	assetId string
	version string
	xDeleteType *string
}

func (r DefaultApiApiAssetsOrgIdAssetIdVersionDeleteRequest) XDeleteType(xDeleteType string) DefaultApiApiAssetsOrgIdAssetIdVersionDeleteRequest {
	r.xDeleteType = &xDeleteType
	return r
}

func (r DefaultApiApiAssetsOrgIdAssetIdVersionDeleteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AssetsOrgIdAssetIdVersionDeleteExecute(r)
}

/*
 * AssetsOrgIdAssetIdVersionDelete Delete an asset
 * Delete an asset
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orgId The ID of the organization in GUID format
 * @param assetId The ID of the asset
 * @param version The version of the asset
 * @return DefaultApiApiAssetsOrgIdAssetIdVersionDeleteRequest
 */
func (a *DefaultApiService) AssetsOrgIdAssetIdVersionDelete(ctx _context.Context, orgId string, assetId string, version string) DefaultApiApiAssetsOrgIdAssetIdVersionDeleteRequest {
	return DefaultApiApiAssetsOrgIdAssetIdVersionDeleteRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		assetId: assetId,
		version: version,
	}
}

/*
 * Execute executes the request
 */
func (a *DefaultApiService) AssetsOrgIdAssetIdVersionDeleteExecute(r DefaultApiApiAssetsOrgIdAssetIdVersionDeleteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.AssetsOrgIdAssetIdVersionDelete")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/assets/{orgId}/{assetId}/{version}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", _neturl.PathEscape(parameterToString(r.orgId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"assetId"+"}", _neturl.PathEscape(parameterToString(r.assetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", _neturl.PathEscape(parameterToString(r.version, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/plain"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xDeleteType != nil {
		localVarHeaderParams["X-Delete-Type"] = parameterToString(*r.xDeleteType, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DefaultApiApiAssetsPostRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	xStrictPackage *bool
	organizationId *string
	assetId *string
	version *string
	name *string
	classifier *string
	apiVersion *string
	main *string
	groupId *string
	asset **os.File
	xAllowedApiSpecFormats *string
	dependencies *string
	originalFormatVersion *string
	metadata *string
	tags *string
	assetLink *string
}

func (r DefaultApiApiAssetsPostRequest) XStrictPackage(xStrictPackage bool) DefaultApiApiAssetsPostRequest {
	r.xStrictPackage = &xStrictPackage
	return r
}
func (r DefaultApiApiAssetsPostRequest) OrganizationId(organizationId string) DefaultApiApiAssetsPostRequest {
	r.organizationId = &organizationId
	return r
}
func (r DefaultApiApiAssetsPostRequest) AssetId(assetId string) DefaultApiApiAssetsPostRequest {
	r.assetId = &assetId
	return r
}
func (r DefaultApiApiAssetsPostRequest) Version(version string) DefaultApiApiAssetsPostRequest {
	r.version = &version
	return r
}
func (r DefaultApiApiAssetsPostRequest) Name(name string) DefaultApiApiAssetsPostRequest {
	r.name = &name
	return r
}
func (r DefaultApiApiAssetsPostRequest) Classifier(classifier string) DefaultApiApiAssetsPostRequest {
	r.classifier = &classifier
	return r
}
func (r DefaultApiApiAssetsPostRequest) ApiVersion(apiVersion string) DefaultApiApiAssetsPostRequest {
	r.apiVersion = &apiVersion
	return r
}
func (r DefaultApiApiAssetsPostRequest) Main(main string) DefaultApiApiAssetsPostRequest {
	r.main = &main
	return r
}
func (r DefaultApiApiAssetsPostRequest) GroupId(groupId string) DefaultApiApiAssetsPostRequest {
	r.groupId = &groupId
	return r
}
func (r DefaultApiApiAssetsPostRequest) Asset(asset *os.File) DefaultApiApiAssetsPostRequest {
	r.asset = &asset
	return r
}
func (r DefaultApiApiAssetsPostRequest) XAllowedApiSpecFormats(xAllowedApiSpecFormats string) DefaultApiApiAssetsPostRequest {
	r.xAllowedApiSpecFormats = &xAllowedApiSpecFormats
	return r
}
func (r DefaultApiApiAssetsPostRequest) Dependencies(dependencies string) DefaultApiApiAssetsPostRequest {
	r.dependencies = &dependencies
	return r
}
func (r DefaultApiApiAssetsPostRequest) OriginalFormatVersion(originalFormatVersion string) DefaultApiApiAssetsPostRequest {
	r.originalFormatVersion = &originalFormatVersion
	return r
}
func (r DefaultApiApiAssetsPostRequest) Metadata(metadata string) DefaultApiApiAssetsPostRequest {
	r.metadata = &metadata
	return r
}
func (r DefaultApiApiAssetsPostRequest) Tags(tags string) DefaultApiApiAssetsPostRequest {
	r.tags = &tags
	return r
}
func (r DefaultApiApiAssetsPostRequest) AssetLink(assetLink string) DefaultApiApiAssetsPostRequest {
	r.assetLink = &assetLink
	return r
}

func (r DefaultApiApiAssetsPostRequest) Execute() (PostAssetResponse, *_nethttp.Response, error) {
	return r.ApiService.AssetsPostExecute(r)
}

/*
 * AssetsPost Create a new asset
 * Create a new asset
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return DefaultApiApiAssetsPostRequest
 */
func (a *DefaultApiService) AssetsPost(ctx _context.Context) DefaultApiApiAssetsPostRequest {
	return DefaultApiApiAssetsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return PostAssetResponse
 */
func (a *DefaultApiService) AssetsPostExecute(r DefaultApiApiAssetsPostRequest) (PostAssetResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PostAssetResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.AssetsPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/assets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xStrictPackage == nil {
		return localVarReturnValue, nil, reportError("xStrictPackage is required and must be specified")
	}
	if r.organizationId == nil {
		return localVarReturnValue, nil, reportError("organizationId is required and must be specified")
	}
	if r.assetId == nil {
		return localVarReturnValue, nil, reportError("assetId is required and must be specified")
	}
	if r.version == nil {
		return localVarReturnValue, nil, reportError("version is required and must be specified")
	}
	if r.name == nil {
		return localVarReturnValue, nil, reportError("name is required and must be specified")
	}
	if r.classifier == nil {
		return localVarReturnValue, nil, reportError("classifier is required and must be specified")
	}
	if r.apiVersion == nil {
		return localVarReturnValue, nil, reportError("apiVersion is required and must be specified")
	}
	if r.main == nil {
		return localVarReturnValue, nil, reportError("main is required and must be specified")
	}
	if r.groupId == nil {
		return localVarReturnValue, nil, reportError("groupId is required and must be specified")
	}
	if r.asset == nil {
		return localVarReturnValue, nil, reportError("asset is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAllowedApiSpecFormats != nil {
		localVarHeaderParams["x-allowed-api-spec-formats"] = parameterToString(*r.xAllowedApiSpecFormats, "")
	}
	localVarHeaderParams["x-strict-package"] = parameterToString(*r.xStrictPackage, "")
	localVarFormParams.Add("organizationId", parameterToString(*r.organizationId, ""))
	localVarFormParams.Add("assetId", parameterToString(*r.assetId, ""))
	localVarFormParams.Add("version", parameterToString(*r.version, ""))
	localVarFormParams.Add("name", parameterToString(*r.name, ""))
	localVarFormParams.Add("classifier", parameterToString(*r.classifier, ""))
	localVarFormParams.Add("apiVersion", parameterToString(*r.apiVersion, ""))
	localVarFormParams.Add("main", parameterToString(*r.main, ""))
	localVarFormParams.Add("groupId", parameterToString(*r.groupId, ""))
	localVarFormFileName = "asset"
	localVarFile := *r.asset
	if localVarFile != nil {
		fbs, _ := _ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	if r.dependencies != nil {
		localVarFormParams.Add("dependencies", parameterToString(*r.dependencies, ""))
	}
	if r.originalFormatVersion != nil {
		localVarFormParams.Add("originalFormatVersion", parameterToString(*r.originalFormatVersion, ""))
	}
	if r.metadata != nil {
		localVarFormParams.Add("metadata", parameterToString(*r.metadata, ""))
	}
	if r.tags != nil {
		localVarFormParams.Add("tags", parameterToString(*r.tags, ""))
	}
	if r.assetLink != nil {
		localVarFormParams.Add("assetLink", parameterToString(*r.assetLink, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiApiAssetsSearchGetRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	types *string
	search *string
	domain *string
	masterOrganizationId *string
	organizationId *string
	offset *int32
	limit *int32
	sort *string
	ascending *string
	sharedWithMe *bool
	includeSnapshots *bool
}

func (r DefaultApiApiAssetsSearchGetRequest) Types(types string) DefaultApiApiAssetsSearchGetRequest {
	r.types = &types
	return r
}
func (r DefaultApiApiAssetsSearchGetRequest) Search(search string) DefaultApiApiAssetsSearchGetRequest {
	r.search = &search
	return r
}
func (r DefaultApiApiAssetsSearchGetRequest) Domain(domain string) DefaultApiApiAssetsSearchGetRequest {
	r.domain = &domain
	return r
}
func (r DefaultApiApiAssetsSearchGetRequest) MasterOrganizationId(masterOrganizationId string) DefaultApiApiAssetsSearchGetRequest {
	r.masterOrganizationId = &masterOrganizationId
	return r
}
func (r DefaultApiApiAssetsSearchGetRequest) OrganizationId(organizationId string) DefaultApiApiAssetsSearchGetRequest {
	r.organizationId = &organizationId
	return r
}
func (r DefaultApiApiAssetsSearchGetRequest) Offset(offset int32) DefaultApiApiAssetsSearchGetRequest {
	r.offset = &offset
	return r
}
func (r DefaultApiApiAssetsSearchGetRequest) Limit(limit int32) DefaultApiApiAssetsSearchGetRequest {
	r.limit = &limit
	return r
}
func (r DefaultApiApiAssetsSearchGetRequest) Sort(sort string) DefaultApiApiAssetsSearchGetRequest {
	r.sort = &sort
	return r
}
func (r DefaultApiApiAssetsSearchGetRequest) Ascending(ascending string) DefaultApiApiAssetsSearchGetRequest {
	r.ascending = &ascending
	return r
}
func (r DefaultApiApiAssetsSearchGetRequest) SharedWithMe(sharedWithMe bool) DefaultApiApiAssetsSearchGetRequest {
	r.sharedWithMe = &sharedWithMe
	return r
}
func (r DefaultApiApiAssetsSearchGetRequest) IncludeSnapshots(includeSnapshots bool) DefaultApiApiAssetsSearchGetRequest {
	r.includeSnapshots = &includeSnapshots
	return r
}

func (r DefaultApiApiAssetsSearchGetRequest) Execute() ([]map[string]interface{}, *_nethttp.Response, error) {
	return r.ApiService.AssetsSearchGetExecute(r)
}

/*
 * AssetsSearchGet Search for assets
 * Search for assets
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return DefaultApiApiAssetsSearchGetRequest
 */
func (a *DefaultApiService) AssetsSearchGet(ctx _context.Context) DefaultApiApiAssetsSearchGetRequest {
	return DefaultApiApiAssetsSearchGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return []map[string]interface{}
 */
func (a *DefaultApiService) AssetsSearchGetExecute(r DefaultApiApiAssetsSearchGetRequest) ([]map[string]interface{}, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.AssetsSearchGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/assets/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.types == nil {
		return localVarReturnValue, nil, reportError("types is required and must be specified")
	}

	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	localVarQueryParams.Add("types", parameterToString(*r.types, ""))
	if r.domain != nil {
		localVarQueryParams.Add("domain", parameterToString(*r.domain, ""))
	}
	if r.masterOrganizationId != nil {
		localVarQueryParams.Add("masterOrganizationId", parameterToString(*r.masterOrganizationId, ""))
	}
	if r.organizationId != nil {
		localVarQueryParams.Add("organizationId", parameterToString(*r.organizationId, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.ascending != nil {
		localVarQueryParams.Add("ascending", parameterToString(*r.ascending, ""))
	}
	if r.sharedWithMe != nil {
		localVarQueryParams.Add("sharedWithMe", parameterToString(*r.sharedWithMe, ""))
	}
	if r.includeSnapshots != nil {
		localVarQueryParams.Add("includeSnapshots", parameterToString(*r.includeSnapshots, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
