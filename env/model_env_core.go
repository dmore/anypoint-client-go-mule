/*
 * ENV API
 *
 * Description of the ENV API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package env

import (
	"encoding/json"
)

// EnvCore struct for EnvCore
type EnvCore struct {
	Name *string `json:"name,omitempty"`
	OrganizationId *string `json:"organizationId,omitempty"`
	IsProduction *bool `json:"isProduction,omitempty"`
	Type *string `json:"type,omitempty"`
	ClientId *string `json:"clientId,omitempty"`
}

// NewEnvCore instantiates a new EnvCore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvCore() *EnvCore {
	this := EnvCore{}
	var isProduction bool = false
	this.IsProduction = &isProduction
	return &this
}

// NewEnvCoreWithDefaults instantiates a new EnvCore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvCoreWithDefaults() *EnvCore {
	this := EnvCore{}
	var isProduction bool = false
	this.IsProduction = &isProduction
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EnvCore) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvCore) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EnvCore) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EnvCore) SetName(v string) {
	o.Name = &v
}

// GetOrganizationId returns the OrganizationId field value if set, zero value otherwise.
func (o *EnvCore) GetOrganizationId() string {
	if o == nil || o.OrganizationId == nil {
		var ret string
		return ret
	}
	return *o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvCore) GetOrganizationIdOk() (*string, bool) {
	if o == nil || o.OrganizationId == nil {
		return nil, false
	}
	return o.OrganizationId, true
}

// HasOrganizationId returns a boolean if a field has been set.
func (o *EnvCore) HasOrganizationId() bool {
	if o != nil && o.OrganizationId != nil {
		return true
	}

	return false
}

// SetOrganizationId gets a reference to the given string and assigns it to the OrganizationId field.
func (o *EnvCore) SetOrganizationId(v string) {
	o.OrganizationId = &v
}

// GetIsProduction returns the IsProduction field value if set, zero value otherwise.
func (o *EnvCore) GetIsProduction() bool {
	if o == nil || o.IsProduction == nil {
		var ret bool
		return ret
	}
	return *o.IsProduction
}

// GetIsProductionOk returns a tuple with the IsProduction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvCore) GetIsProductionOk() (*bool, bool) {
	if o == nil || o.IsProduction == nil {
		return nil, false
	}
	return o.IsProduction, true
}

// HasIsProduction returns a boolean if a field has been set.
func (o *EnvCore) HasIsProduction() bool {
	if o != nil && o.IsProduction != nil {
		return true
	}

	return false
}

// SetIsProduction gets a reference to the given bool and assigns it to the IsProduction field.
func (o *EnvCore) SetIsProduction(v bool) {
	o.IsProduction = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EnvCore) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvCore) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EnvCore) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EnvCore) SetType(v string) {
	o.Type = &v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *EnvCore) GetClientId() string {
	if o == nil || o.ClientId == nil {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvCore) GetClientIdOk() (*string, bool) {
	if o == nil || o.ClientId == nil {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *EnvCore) HasClientId() bool {
	if o != nil && o.ClientId != nil {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *EnvCore) SetClientId(v string) {
	o.ClientId = &v
}

func (o EnvCore) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.OrganizationId != nil {
		toSerialize["organizationId"] = o.OrganizationId
	}
	if o.IsProduction != nil {
		toSerialize["isProduction"] = o.IsProduction
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.ClientId != nil {
		toSerialize["clientId"] = o.ClientId
	}
	return json.Marshal(toSerialize)
}

type NullableEnvCore struct {
	value *EnvCore
	isSet bool
}

func (v NullableEnvCore) Get() *EnvCore {
	return v.value
}

func (v *NullableEnvCore) Set(val *EnvCore) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvCore) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvCore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvCore(val *EnvCore) *NullableEnvCore {
	return &NullableEnvCore{value: val, isSet: true}
}

func (v NullableEnvCore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvCore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


