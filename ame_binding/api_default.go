/*
 * Anypoint MQ Exchange Binding specfication
 *
 * Anypoint MQ Exchange Binding API specification
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ame_binding

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DefaultApiService DefaultApi service
type DefaultApiService service

type DefaultApiApiOrganizationsOrgIdEnvironmentsEnvIdRegionsRegionIdBindingsExchangesExchangeIdQueuesQueueIdDeleteRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	regionId string
	exchangeId string
	queueId string
}


func (r DefaultApiApiOrganizationsOrgIdEnvironmentsEnvIdRegionsRegionIdBindingsExchangesExchangeIdQueuesQueueIdDeleteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.OrganizationsOrgIdEnvironmentsEnvIdRegionsRegionIdBindingsExchangesExchangeIdQueuesQueueIdDeleteExecute(r)
}

/*
 * OrganizationsOrgIdEnvironmentsEnvIdRegionsRegionIdBindingsExchangesExchangeIdQueuesQueueIdDelete Method for OrganizationsOrgIdEnvironmentsEnvIdRegionsRegionIdBindingsExchangesExchangeIdQueuesQueueIdDelete
 * Delete an exchange queue binding
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orgId The organization Id
 * @param envId The environment id
 * @param regionId The region id
 * @param exchangeId The id of a specific exchange
 * @param queueId The id of a specific exchange queue binding
 * @return DefaultApiApiOrganizationsOrgIdEnvironmentsEnvIdRegionsRegionIdBindingsExchangesExchangeIdQueuesQueueIdDeleteRequest
 */
func (a *DefaultApiService) OrganizationsOrgIdEnvironmentsEnvIdRegionsRegionIdBindingsExchangesExchangeIdQueuesQueueIdDelete(ctx _context.Context, orgId string, envId string, regionId string, exchangeId string, queueId string) DefaultApiApiOrganizationsOrgIdEnvironmentsEnvIdRegionsRegionIdBindingsExchangesExchangeIdQueuesQueueIdDeleteRequest {
	return DefaultApiApiOrganizationsOrgIdEnvironmentsEnvIdRegionsRegionIdBindingsExchangesExchangeIdQueuesQueueIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		regionId: regionId,
		exchangeId: exchangeId,
		queueId: queueId,
	}
}

/*
 * Execute executes the request
 */
func (a *DefaultApiService) OrganizationsOrgIdEnvironmentsEnvIdRegionsRegionIdBindingsExchangesExchangeIdQueuesQueueIdDeleteExecute(r DefaultApiApiOrganizationsOrgIdEnvironmentsEnvIdRegionsRegionIdBindingsExchangesExchangeIdQueuesQueueIdDeleteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdEnvironmentsEnvIdRegionsRegionIdBindingsExchangesExchangeIdQueuesQueueIdDelete")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/environments/{envId}/regions/{regionId}/bindings/exchanges/{exchangeId}/queues/{queueId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", _neturl.PathEscape(parameterToString(r.orgId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", _neturl.PathEscape(parameterToString(r.envId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"regionId"+"}", _neturl.PathEscape(parameterToString(r.regionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"exchangeId"+"}", _neturl.PathEscape(parameterToString(r.exchangeId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueId"+"}", _neturl.PathEscape(parameterToString(r.queueId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DefaultApiApiOrganizationsOrgIdEnvironmentsEnvIdRegionsRegionIdBindingsExchangesExchangeIdQueuesQueueIdGetRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	regionId string
	exchangeId string
	queueId string
}


func (r DefaultApiApiOrganizationsOrgIdEnvironmentsEnvIdRegionsRegionIdBindingsExchangesExchangeIdQueuesQueueIdGetRequest) Execute() (ExchangeBinding, *_nethttp.Response, error) {
	return r.ApiService.OrganizationsOrgIdEnvironmentsEnvIdRegionsRegionIdBindingsExchangesExchangeIdQueuesQueueIdGetExecute(r)
}

/*
 * OrganizationsOrgIdEnvironmentsEnvIdRegionsRegionIdBindingsExchangesExchangeIdQueuesQueueIdGet Method for OrganizationsOrgIdEnvironmentsEnvIdRegionsRegionIdBindingsExchangesExchangeIdQueuesQueueIdGet
 * Get details about a queue bound to an exchange
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orgId The organization Id
 * @param envId The environment id
 * @param regionId The region id
 * @param exchangeId The id of a specific exchange
 * @param queueId The id of a specific exchange queue binding
 * @return DefaultApiApiOrganizationsOrgIdEnvironmentsEnvIdRegionsRegionIdBindingsExchangesExchangeIdQueuesQueueIdGetRequest
 */
func (a *DefaultApiService) OrganizationsOrgIdEnvironmentsEnvIdRegionsRegionIdBindingsExchangesExchangeIdQueuesQueueIdGet(ctx _context.Context, orgId string, envId string, regionId string, exchangeId string, queueId string) DefaultApiApiOrganizationsOrgIdEnvironmentsEnvIdRegionsRegionIdBindingsExchangesExchangeIdQueuesQueueIdGetRequest {
	return DefaultApiApiOrganizationsOrgIdEnvironmentsEnvIdRegionsRegionIdBindingsExchangesExchangeIdQueuesQueueIdGetRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		regionId: regionId,
		exchangeId: exchangeId,
		queueId: queueId,
	}
}

/*
 * Execute executes the request
 * @return ExchangeBinding
 */
func (a *DefaultApiService) OrganizationsOrgIdEnvironmentsEnvIdRegionsRegionIdBindingsExchangesExchangeIdQueuesQueueIdGetExecute(r DefaultApiApiOrganizationsOrgIdEnvironmentsEnvIdRegionsRegionIdBindingsExchangesExchangeIdQueuesQueueIdGetRequest) (ExchangeBinding, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ExchangeBinding
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdEnvironmentsEnvIdRegionsRegionIdBindingsExchangesExchangeIdQueuesQueueIdGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/environments/{envId}/regions/{regionId}/bindings/exchanges/{exchangeId}/queues/{queueId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", _neturl.PathEscape(parameterToString(r.orgId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", _neturl.PathEscape(parameterToString(r.envId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"regionId"+"}", _neturl.PathEscape(parameterToString(r.regionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"exchangeId"+"}", _neturl.PathEscape(parameterToString(r.exchangeId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueId"+"}", _neturl.PathEscape(parameterToString(r.queueId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiApiOrganizationsOrgIdEnvironmentsEnvIdRegionsRegionIdBindingsExchangesExchangeIdQueuesQueueIdPutRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	regionId string
	exchangeId string
	queueId string
}


func (r DefaultApiApiOrganizationsOrgIdEnvironmentsEnvIdRegionsRegionIdBindingsExchangesExchangeIdQueuesQueueIdPutRequest) Execute() (ExchangeBinding, *_nethttp.Response, error) {
	return r.ApiService.OrganizationsOrgIdEnvironmentsEnvIdRegionsRegionIdBindingsExchangesExchangeIdQueuesQueueIdPutExecute(r)
}

/*
 * OrganizationsOrgIdEnvironmentsEnvIdRegionsRegionIdBindingsExchangesExchangeIdQueuesQueueIdPut Method for OrganizationsOrgIdEnvironmentsEnvIdRegionsRegionIdBindingsExchangesExchangeIdQueuesQueueIdPut
 * Create exchange queue binding
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orgId The organization Id
 * @param envId The environment id
 * @param regionId The region id
 * @param exchangeId The id of a specific exchange
 * @param queueId The id of a specific exchange queue binding
 * @return DefaultApiApiOrganizationsOrgIdEnvironmentsEnvIdRegionsRegionIdBindingsExchangesExchangeIdQueuesQueueIdPutRequest
 */
func (a *DefaultApiService) OrganizationsOrgIdEnvironmentsEnvIdRegionsRegionIdBindingsExchangesExchangeIdQueuesQueueIdPut(ctx _context.Context, orgId string, envId string, regionId string, exchangeId string, queueId string) DefaultApiApiOrganizationsOrgIdEnvironmentsEnvIdRegionsRegionIdBindingsExchangesExchangeIdQueuesQueueIdPutRequest {
	return DefaultApiApiOrganizationsOrgIdEnvironmentsEnvIdRegionsRegionIdBindingsExchangesExchangeIdQueuesQueueIdPutRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		regionId: regionId,
		exchangeId: exchangeId,
		queueId: queueId,
	}
}

/*
 * Execute executes the request
 * @return ExchangeBinding
 */
func (a *DefaultApiService) OrganizationsOrgIdEnvironmentsEnvIdRegionsRegionIdBindingsExchangesExchangeIdQueuesQueueIdPutExecute(r DefaultApiApiOrganizationsOrgIdEnvironmentsEnvIdRegionsRegionIdBindingsExchangesExchangeIdQueuesQueueIdPutRequest) (ExchangeBinding, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ExchangeBinding
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdEnvironmentsEnvIdRegionsRegionIdBindingsExchangesExchangeIdQueuesQueueIdPut")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/environments/{envId}/regions/{regionId}/bindings/exchanges/{exchangeId}/queues/{queueId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", _neturl.PathEscape(parameterToString(r.orgId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", _neturl.PathEscape(parameterToString(r.envId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"regionId"+"}", _neturl.PathEscape(parameterToString(r.regionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"exchangeId"+"}", _neturl.PathEscape(parameterToString(r.exchangeId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"queueId"+"}", _neturl.PathEscape(parameterToString(r.queueId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
