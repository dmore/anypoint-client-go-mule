/*
 * Team API
 *
 * Description of the Team API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package team

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"reflect"
)

// Linger please
var (
	_ _context.Context
)

// DefaultApiService DefaultApi service
type DefaultApiService service

type DefaultApiApiOrganizationsOrgIdTeamsGetRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	orgId string
	ancestorTeamId *[]string
	parentTeamId *[]string
	teamId *string
	teamType *string
	search *string
	limit *int32
	offset *int32
	sort *string
	ascending *bool
}

func (r DefaultApiApiOrganizationsOrgIdTeamsGetRequest) AncestorTeamId(ancestorTeamId []string) DefaultApiApiOrganizationsOrgIdTeamsGetRequest {
	r.ancestorTeamId = &ancestorTeamId
	return r
}
func (r DefaultApiApiOrganizationsOrgIdTeamsGetRequest) ParentTeamId(parentTeamId []string) DefaultApiApiOrganizationsOrgIdTeamsGetRequest {
	r.parentTeamId = &parentTeamId
	return r
}
func (r DefaultApiApiOrganizationsOrgIdTeamsGetRequest) TeamId(teamId string) DefaultApiApiOrganizationsOrgIdTeamsGetRequest {
	r.teamId = &teamId
	return r
}
func (r DefaultApiApiOrganizationsOrgIdTeamsGetRequest) TeamType(teamType string) DefaultApiApiOrganizationsOrgIdTeamsGetRequest {
	r.teamType = &teamType
	return r
}
func (r DefaultApiApiOrganizationsOrgIdTeamsGetRequest) Search(search string) DefaultApiApiOrganizationsOrgIdTeamsGetRequest {
	r.search = &search
	return r
}
func (r DefaultApiApiOrganizationsOrgIdTeamsGetRequest) Limit(limit int32) DefaultApiApiOrganizationsOrgIdTeamsGetRequest {
	r.limit = &limit
	return r
}
func (r DefaultApiApiOrganizationsOrgIdTeamsGetRequest) Offset(offset int32) DefaultApiApiOrganizationsOrgIdTeamsGetRequest {
	r.offset = &offset
	return r
}
func (r DefaultApiApiOrganizationsOrgIdTeamsGetRequest) Sort(sort string) DefaultApiApiOrganizationsOrgIdTeamsGetRequest {
	r.sort = &sort
	return r
}
func (r DefaultApiApiOrganizationsOrgIdTeamsGetRequest) Ascending(ascending bool) DefaultApiApiOrganizationsOrgIdTeamsGetRequest {
	r.ascending = &ascending
	return r
}

func (r DefaultApiApiOrganizationsOrgIdTeamsGetRequest) Execute() (TeamCollection, *_nethttp.Response, error) {
	return r.ApiService.OrganizationsOrgIdTeamsGetExecute(r)
}

/*
 * OrganizationsOrgIdTeamsGet Method for OrganizationsOrgIdTeamsGet
 * Returns teams.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orgId The ID of the organization in GUID format
 * @return DefaultApiApiOrganizationsOrgIdTeamsGetRequest
 */
func (a *DefaultApiService) OrganizationsOrgIdTeamsGet(ctx _context.Context, orgId string) DefaultApiApiOrganizationsOrgIdTeamsGetRequest {
	return DefaultApiApiOrganizationsOrgIdTeamsGetRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
	}
}

/*
 * Execute executes the request
 * @return TeamCollection
 */
func (a *DefaultApiService) OrganizationsOrgIdTeamsGetExecute(r DefaultApiApiOrganizationsOrgIdTeamsGetRequest) (TeamCollection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TeamCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdTeamsGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/teams"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", _neturl.PathEscape(parameterToString(r.orgId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.ancestorTeamId != nil {
		t := *r.ancestorTeamId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("ancestor_team_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("ancestor_team_id", parameterToString(t, "multi"))
		}
	}
	if r.parentTeamId != nil {
		t := *r.parentTeamId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("parent_team_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("parent_team_id", parameterToString(t, "multi"))
		}
	}
	if r.teamId != nil {
		localVarQueryParams.Add("team_id", parameterToString(*r.teamId, ""))
	}
	if r.teamType != nil {
		localVarQueryParams.Add("team_type", parameterToString(*r.teamType, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.ascending != nil {
		localVarQueryParams.Add("ascending", parameterToString(*r.ascending, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiApiOrganizationsOrgIdTeamsPostRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	orgId string
	teamPostBody *TeamPostBody
}

func (r DefaultApiApiOrganizationsOrgIdTeamsPostRequest) TeamPostBody(teamPostBody TeamPostBody) DefaultApiApiOrganizationsOrgIdTeamsPostRequest {
	r.teamPostBody = &teamPostBody
	return r
}

func (r DefaultApiApiOrganizationsOrgIdTeamsPostRequest) Execute() (Team, *_nethttp.Response, error) {
	return r.ApiService.OrganizationsOrgIdTeamsPostExecute(r)
}

/*
 * OrganizationsOrgIdTeamsPost Method for OrganizationsOrgIdTeamsPost
 * Creates a new team
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orgId The ID of the organization in GUID format
 * @return DefaultApiApiOrganizationsOrgIdTeamsPostRequest
 */
func (a *DefaultApiService) OrganizationsOrgIdTeamsPost(ctx _context.Context, orgId string) DefaultApiApiOrganizationsOrgIdTeamsPostRequest {
	return DefaultApiApiOrganizationsOrgIdTeamsPostRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
	}
}

/*
 * Execute executes the request
 * @return Team
 */
func (a *DefaultApiService) OrganizationsOrgIdTeamsPostExecute(r DefaultApiApiOrganizationsOrgIdTeamsPostRequest) (Team, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Team
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdTeamsPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/teams"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", _neturl.PathEscape(parameterToString(r.orgId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.teamPostBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiApiOrganizationsOrgIdTeamsTeamIdDeleteRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	orgId string
	teamId string
}


func (r DefaultApiApiOrganizationsOrgIdTeamsTeamIdDeleteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.OrganizationsOrgIdTeamsTeamIdDeleteExecute(r)
}

/*
 * OrganizationsOrgIdTeamsTeamIdDelete Method for OrganizationsOrgIdTeamsTeamIdDelete
 * delete a team
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orgId The ID of the organization in GUID format
 * @param teamId The ID of the team in GUID format
 * @return DefaultApiApiOrganizationsOrgIdTeamsTeamIdDeleteRequest
 */
func (a *DefaultApiService) OrganizationsOrgIdTeamsTeamIdDelete(ctx _context.Context, orgId string, teamId string) DefaultApiApiOrganizationsOrgIdTeamsTeamIdDeleteRequest {
	return DefaultApiApiOrganizationsOrgIdTeamsTeamIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		teamId: teamId,
	}
}

/*
 * Execute executes the request
 */
func (a *DefaultApiService) OrganizationsOrgIdTeamsTeamIdDeleteExecute(r DefaultApiApiOrganizationsOrgIdTeamsTeamIdDeleteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdTeamsTeamIdDelete")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/teams/{teamId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", _neturl.PathEscape(parameterToString(r.orgId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamId"+"}", _neturl.PathEscape(parameterToString(r.teamId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DefaultApiApiOrganizationsOrgIdTeamsTeamIdGetRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	orgId string
	teamId string
}


func (r DefaultApiApiOrganizationsOrgIdTeamsTeamIdGetRequest) Execute() (Team, *_nethttp.Response, error) {
	return r.ApiService.OrganizationsOrgIdTeamsTeamIdGetExecute(r)
}

/*
 * OrganizationsOrgIdTeamsTeamIdGet Method for OrganizationsOrgIdTeamsTeamIdGet
 * retrieves team by id
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orgId The ID of the organization in GUID format
 * @param teamId The ID of the team in GUID format
 * @return DefaultApiApiOrganizationsOrgIdTeamsTeamIdGetRequest
 */
func (a *DefaultApiService) OrganizationsOrgIdTeamsTeamIdGet(ctx _context.Context, orgId string, teamId string) DefaultApiApiOrganizationsOrgIdTeamsTeamIdGetRequest {
	return DefaultApiApiOrganizationsOrgIdTeamsTeamIdGetRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		teamId: teamId,
	}
}

/*
 * Execute executes the request
 * @return Team
 */
func (a *DefaultApiService) OrganizationsOrgIdTeamsTeamIdGetExecute(r DefaultApiApiOrganizationsOrgIdTeamsTeamIdGetRequest) (Team, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Team
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdTeamsTeamIdGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/teams/{teamId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", _neturl.PathEscape(parameterToString(r.orgId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamId"+"}", _neturl.PathEscape(parameterToString(r.teamId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiApiOrganizationsOrgIdTeamsTeamIdParentPutRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	orgId string
	teamId string
	teamPutBody *TeamPutBody
}

func (r DefaultApiApiOrganizationsOrgIdTeamsTeamIdParentPutRequest) TeamPutBody(teamPutBody TeamPutBody) DefaultApiApiOrganizationsOrgIdTeamsTeamIdParentPutRequest {
	r.teamPutBody = &teamPutBody
	return r
}

func (r DefaultApiApiOrganizationsOrgIdTeamsTeamIdParentPutRequest) Execute() (Team, *_nethttp.Response, error) {
	return r.ApiService.OrganizationsOrgIdTeamsTeamIdParentPutExecute(r)
}

/*
 * OrganizationsOrgIdTeamsTeamIdParentPut Method for OrganizationsOrgIdTeamsTeamIdParentPut
 * moves a team (along with its nested teams) from one parent team to another
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orgId The ID of the organization in GUID format
 * @param teamId The ID of the team in GUID format
 * @return DefaultApiApiOrganizationsOrgIdTeamsTeamIdParentPutRequest
 */
func (a *DefaultApiService) OrganizationsOrgIdTeamsTeamIdParentPut(ctx _context.Context, orgId string, teamId string) DefaultApiApiOrganizationsOrgIdTeamsTeamIdParentPutRequest {
	return DefaultApiApiOrganizationsOrgIdTeamsTeamIdParentPutRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		teamId: teamId,
	}
}

/*
 * Execute executes the request
 * @return Team
 */
func (a *DefaultApiService) OrganizationsOrgIdTeamsTeamIdParentPutExecute(r DefaultApiApiOrganizationsOrgIdTeamsTeamIdParentPutRequest) (Team, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Team
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdTeamsTeamIdParentPut")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/teams/{teamId}/parent"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", _neturl.PathEscape(parameterToString(r.orgId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamId"+"}", _neturl.PathEscape(parameterToString(r.teamId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.teamPutBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiApiOrganizationsOrgIdTeamsTeamIdPatchRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	orgId string
	teamId string
	teamPatchBody *TeamPatchBody
}

func (r DefaultApiApiOrganizationsOrgIdTeamsTeamIdPatchRequest) TeamPatchBody(teamPatchBody TeamPatchBody) DefaultApiApiOrganizationsOrgIdTeamsTeamIdPatchRequest {
	r.teamPatchBody = &teamPatchBody
	return r
}

func (r DefaultApiApiOrganizationsOrgIdTeamsTeamIdPatchRequest) Execute() (Team, *_nethttp.Response, error) {
	return r.ApiService.OrganizationsOrgIdTeamsTeamIdPatchExecute(r)
}

/*
 * OrganizationsOrgIdTeamsTeamIdPatch Method for OrganizationsOrgIdTeamsTeamIdPatch
 * updates a team
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orgId The ID of the organization in GUID format
 * @param teamId The ID of the team in GUID format
 * @return DefaultApiApiOrganizationsOrgIdTeamsTeamIdPatchRequest
 */
func (a *DefaultApiService) OrganizationsOrgIdTeamsTeamIdPatch(ctx _context.Context, orgId string, teamId string) DefaultApiApiOrganizationsOrgIdTeamsTeamIdPatchRequest {
	return DefaultApiApiOrganizationsOrgIdTeamsTeamIdPatchRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		teamId: teamId,
	}
}

/*
 * Execute executes the request
 * @return Team
 */
func (a *DefaultApiService) OrganizationsOrgIdTeamsTeamIdPatchExecute(r DefaultApiApiOrganizationsOrgIdTeamsTeamIdPatchRequest) (Team, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Team
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdTeamsTeamIdPatch")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/teams/{teamId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", _neturl.PathEscape(parameterToString(r.orgId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamId"+"}", _neturl.PathEscape(parameterToString(r.teamId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.teamPatchBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
