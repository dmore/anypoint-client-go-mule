/*
 * Organization API
 *
 * Description of the Organization API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package org

import (
	"encoding/json"
)

// WorkerClouds An explanation about the purpose of this instance.
type WorkerClouds struct {
	// An explanation about the purpose of this instance.
	Assigned int32 `json:"assigned"`
	// An explanation about the purpose of this instance.
	Reassigned *int32 `json:"reassigned,omitempty"`
}

// NewWorkerClouds instantiates a new WorkerClouds object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkerClouds(assigned int32) *WorkerClouds {
	this := WorkerClouds{}
	this.Assigned = assigned
	var reassigned int32 = 0
	this.Reassigned = &reassigned
	return &this
}

// NewWorkerCloudsWithDefaults instantiates a new WorkerClouds object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkerCloudsWithDefaults() *WorkerClouds {
	this := WorkerClouds{}
	var assigned int32 = 0
	this.Assigned = assigned
	var reassigned int32 = 0
	this.Reassigned = &reassigned
	return &this
}

// GetAssigned returns the Assigned field value
func (o *WorkerClouds) GetAssigned() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Assigned
}

// GetAssignedOk returns a tuple with the Assigned field value
// and a boolean to check if the value has been set.
func (o *WorkerClouds) GetAssignedOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Assigned, true
}

// SetAssigned sets field value
func (o *WorkerClouds) SetAssigned(v int32) {
	o.Assigned = v
}

// GetReassigned returns the Reassigned field value if set, zero value otherwise.
func (o *WorkerClouds) GetReassigned() int32 {
	if o == nil || o.Reassigned == nil {
		var ret int32
		return ret
	}
	return *o.Reassigned
}

// GetReassignedOk returns a tuple with the Reassigned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkerClouds) GetReassignedOk() (*int32, bool) {
	if o == nil || o.Reassigned == nil {
		return nil, false
	}
	return o.Reassigned, true
}

// HasReassigned returns a boolean if a field has been set.
func (o *WorkerClouds) HasReassigned() bool {
	if o != nil && o.Reassigned != nil {
		return true
	}

	return false
}

// SetReassigned gets a reference to the given int32 and assigns it to the Reassigned field.
func (o *WorkerClouds) SetReassigned(v int32) {
	o.Reassigned = &v
}

func (o WorkerClouds) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["assigned"] = o.Assigned
	}
	if o.Reassigned != nil {
		toSerialize["reassigned"] = o.Reassigned
	}
	return json.Marshal(toSerialize)
}

type NullableWorkerClouds struct {
	value *WorkerClouds
	isSet bool
}

func (v NullableWorkerClouds) Get() *WorkerClouds {
	return v.value
}

func (v *NullableWorkerClouds) Set(val *WorkerClouds) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkerClouds) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkerClouds) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkerClouds(val *WorkerClouds) *NullableWorkerClouds {
	return &NullableWorkerClouds{value: val, isSet: true}
}

func (v NullableWorkerClouds) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkerClouds) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


