/*
 * Organization API
 *
 * Description of the Organization API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package org

import (
	"encoding/json"
)

// Environment An explanation about the purpose of this instance.
type Environment struct {
	// An explanation about the purpose of this instance.
	ClientId string `json:"clientId"`
	// An explanation about the purpose of this instance.
	Id string `json:"id"`
	// An explanation about the purpose of this instance.
	IsProduction bool `json:"isProduction"`
	// An explanation about the purpose of this instance.
	Name string `json:"name"`
	// An explanation about the purpose of this instance.
	OrganizationId string `json:"organizationId"`
	// An explanation about the purpose of this instance.
	Type string `json:"type"`
}

// NewEnvironment instantiates a new Environment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironment(clientId string, id string, isProduction bool, name string, organizationId string, type_ string) *Environment {
	this := Environment{}
	this.ClientId = clientId
	this.Id = id
	this.IsProduction = isProduction
	this.Name = name
	this.OrganizationId = organizationId
	this.Type = type_
	return &this
}

// NewEnvironmentWithDefaults instantiates a new Environment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentWithDefaults() *Environment {
	this := Environment{}
	var clientId string = ""
	this.ClientId = clientId
	var id string = ""
	this.Id = id
	var isProduction bool = false
	this.IsProduction = isProduction
	var name string = ""
	this.Name = name
	var organizationId string = ""
	this.OrganizationId = organizationId
	var type_ string = ""
	this.Type = type_
	return &this
}

// GetClientId returns the ClientId field value
func (o *Environment) GetClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *Environment) GetClientIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ClientId, true
}

// SetClientId sets field value
func (o *Environment) SetClientId(v string) {
	o.ClientId = v
}

// GetId returns the Id field value
func (o *Environment) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Environment) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Environment) SetId(v string) {
	o.Id = v
}

// GetIsProduction returns the IsProduction field value
func (o *Environment) GetIsProduction() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsProduction
}

// GetIsProductionOk returns a tuple with the IsProduction field value
// and a boolean to check if the value has been set.
func (o *Environment) GetIsProductionOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IsProduction, true
}

// SetIsProduction sets field value
func (o *Environment) SetIsProduction(v bool) {
	o.IsProduction = v
}

// GetName returns the Name field value
func (o *Environment) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Environment) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Environment) SetName(v string) {
	o.Name = v
}

// GetOrganizationId returns the OrganizationId field value
func (o *Environment) GetOrganizationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value
// and a boolean to check if the value has been set.
func (o *Environment) GetOrganizationIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.OrganizationId, true
}

// SetOrganizationId sets field value
func (o *Environment) SetOrganizationId(v string) {
	o.OrganizationId = v
}

// GetType returns the Type field value
func (o *Environment) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Environment) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Environment) SetType(v string) {
	o.Type = v
}

func (o Environment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["clientId"] = o.ClientId
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["isProduction"] = o.IsProduction
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["organizationId"] = o.OrganizationId
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableEnvironment struct {
	value *Environment
	isSet bool
}

func (v NullableEnvironment) Get() *Environment {
	return v.value
}

func (v *NullableEnvironment) Set(val *Environment) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironment) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironment(val *Environment) *NullableEnvironment {
	return &NullableEnvironment{value: val, isSet: true}
}

func (v NullableEnvironment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


