/*
 * VPC API
 *
 * Description of the VPC API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"encoding/json"
)

// TheInternalDnsSchema struct for TheInternalDnsSchema
type TheInternalDnsSchema struct {
	DnsServers []string `json:"dnsServers"`
	SpecialDomains []string `json:"specialDomains"`
}

// NewTheInternalDnsSchema instantiates a new TheInternalDnsSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTheInternalDnsSchema(dnsServers []string, specialDomains []string) *TheInternalDnsSchema {
	this := TheInternalDnsSchema{}
	this.DnsServers = dnsServers
	this.SpecialDomains = specialDomains
	return &this
}

// NewTheInternalDnsSchemaWithDefaults instantiates a new TheInternalDnsSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTheInternalDnsSchemaWithDefaults() *TheInternalDnsSchema {
	this := TheInternalDnsSchema{}
	return &this
}

// GetDnsServers returns the DnsServers field value
func (o *TheInternalDnsSchema) GetDnsServers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DnsServers
}

// GetDnsServersOk returns a tuple with the DnsServers field value
// and a boolean to check if the value has been set.
func (o *TheInternalDnsSchema) GetDnsServersOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DnsServers, true
}

// SetDnsServers sets field value
func (o *TheInternalDnsSchema) SetDnsServers(v []string) {
	o.DnsServers = v
}

// GetSpecialDomains returns the SpecialDomains field value
func (o *TheInternalDnsSchema) GetSpecialDomains() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SpecialDomains
}

// GetSpecialDomainsOk returns a tuple with the SpecialDomains field value
// and a boolean to check if the value has been set.
func (o *TheInternalDnsSchema) GetSpecialDomainsOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SpecialDomains, true
}

// SetSpecialDomains sets field value
func (o *TheInternalDnsSchema) SetSpecialDomains(v []string) {
	o.SpecialDomains = v
}

func (o TheInternalDnsSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["dnsServers"] = o.DnsServers
	}
	if true {
		toSerialize["specialDomains"] = o.SpecialDomains
	}
	return json.Marshal(toSerialize)
}

type NullableTheInternalDnsSchema struct {
	value *TheInternalDnsSchema
	isSet bool
}

func (v NullableTheInternalDnsSchema) Get() *TheInternalDnsSchema {
	return v.value
}

func (v *NullableTheInternalDnsSchema) Set(val *TheInternalDnsSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableTheInternalDnsSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableTheInternalDnsSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTheInternalDnsSchema(val *TheInternalDnsSchema) *NullableTheInternalDnsSchema {
	return &NullableTheInternalDnsSchema{value: val, isSet: true}
}

func (v NullableTheInternalDnsSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTheInternalDnsSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


