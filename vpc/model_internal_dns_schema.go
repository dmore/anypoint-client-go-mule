/*
 * VPC API
 *
 * Description of the VPC API
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"encoding/json"
)

// InternalDnsSchema struct for InternalDnsSchema
type InternalDnsSchema struct {
	DnsServers []string `json:"dnsServers"`
	SpecialDomains []string `json:"specialDomains"`
}

// NewInternalDnsSchema instantiates a new InternalDnsSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInternalDnsSchema(dnsServers []string, specialDomains []string) *InternalDnsSchema {
	this := InternalDnsSchema{}
	this.DnsServers = dnsServers
	this.SpecialDomains = specialDomains
	return &this
}

// NewInternalDnsSchemaWithDefaults instantiates a new InternalDnsSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInternalDnsSchemaWithDefaults() *InternalDnsSchema {
	this := InternalDnsSchema{}
	return &this
}

// GetDnsServers returns the DnsServers field value
func (o *InternalDnsSchema) GetDnsServers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DnsServers
}

// GetDnsServersOk returns a tuple with the DnsServers field value
// and a boolean to check if the value has been set.
func (o *InternalDnsSchema) GetDnsServersOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DnsServers, true
}

// SetDnsServers sets field value
func (o *InternalDnsSchema) SetDnsServers(v []string) {
	o.DnsServers = v
}

// GetSpecialDomains returns the SpecialDomains field value
func (o *InternalDnsSchema) GetSpecialDomains() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SpecialDomains
}

// GetSpecialDomainsOk returns a tuple with the SpecialDomains field value
// and a boolean to check if the value has been set.
func (o *InternalDnsSchema) GetSpecialDomainsOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SpecialDomains, true
}

// SetSpecialDomains sets field value
func (o *InternalDnsSchema) SetSpecialDomains(v []string) {
	o.SpecialDomains = v
}

func (o InternalDnsSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["dnsServers"] = o.DnsServers
	}
	if true {
		toSerialize["specialDomains"] = o.SpecialDomains
	}
	return json.Marshal(toSerialize)
}

type NullableInternalDnsSchema struct {
	value *InternalDnsSchema
	isSet bool
}

func (v NullableInternalDnsSchema) Get() *InternalDnsSchema {
	return v.value
}

func (v *NullableInternalDnsSchema) Set(val *InternalDnsSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableInternalDnsSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableInternalDnsSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInternalDnsSchema(val *InternalDnsSchema) *NullableInternalDnsSchema {
	return &NullableInternalDnsSchema{value: val, isSet: true}
}

func (v NullableInternalDnsSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInternalDnsSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


