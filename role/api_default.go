/*
 * Role API
 *
 * Description of the Role API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package role

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DefaultApiService DefaultApi service
type DefaultApiService service

type DefaultApiApiOrganizationsOrgIdRolegroupsRolegroupIdRolesDeleteRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	orgId string
	rolegroupId string
}


func (r DefaultApiApiOrganizationsOrgIdRolegroupsRolegroupIdRolesDeleteRequest) Execute() ([]int32, *_nethttp.Response, error) {
	return r.ApiService.OrganizationsOrgIdRolegroupsRolegroupIdRolesDeleteExecute(r)
}

/*
 * OrganizationsOrgIdRolegroupsRolegroupIdRolesDelete Method for OrganizationsOrgIdRolegroupsRolegroupIdRolesDelete
 * Delete assigned roles
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orgId The ID of the organization in GUID format
 * @param rolegroupId The id of a rolegroup
 * @return DefaultApiApiOrganizationsOrgIdRolegroupsRolegroupIdRolesDeleteRequest
 */
func (a *DefaultApiService) OrganizationsOrgIdRolegroupsRolegroupIdRolesDelete(ctx _context.Context, orgId string, rolegroupId string) DefaultApiApiOrganizationsOrgIdRolegroupsRolegroupIdRolesDeleteRequest {
	return DefaultApiApiOrganizationsOrgIdRolegroupsRolegroupIdRolesDeleteRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		rolegroupId: rolegroupId,
	}
}

/*
 * Execute executes the request
 * @return []int32
 */
func (a *DefaultApiService) OrganizationsOrgIdRolegroupsRolegroupIdRolesDeleteExecute(r DefaultApiApiOrganizationsOrgIdRolegroupsRolegroupIdRolesDeleteRequest) ([]int32, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []int32
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdRolegroupsRolegroupIdRolesDelete")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/rolegroups/{rolegroupId}/roles"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", _neturl.PathEscape(parameterToString(r.orgId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"rolegroupId"+"}", _neturl.PathEscape(parameterToString(r.rolegroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiApiOrganizationsOrgIdRolegroupsRolegroupIdRolesGetRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	orgId string
	rolegroupId string
}


func (r DefaultApiApiOrganizationsOrgIdRolegroupsRolegroupIdRolesGetRequest) Execute() (InlineResponse2001, *_nethttp.Response, error) {
	return r.ApiService.OrganizationsOrgIdRolegroupsRolegroupIdRolesGetExecute(r)
}

/*
 * OrganizationsOrgIdRolegroupsRolegroupIdRolesGet Method for OrganizationsOrgIdRolegroupsRolegroupIdRolesGet
 * Returns all roles assigned to the given rolegroup within the organization
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orgId The ID of the organization in GUID format
 * @param rolegroupId The id of a rolegroup
 * @return DefaultApiApiOrganizationsOrgIdRolegroupsRolegroupIdRolesGetRequest
 */
func (a *DefaultApiService) OrganizationsOrgIdRolegroupsRolegroupIdRolesGet(ctx _context.Context, orgId string, rolegroupId string) DefaultApiApiOrganizationsOrgIdRolegroupsRolegroupIdRolesGetRequest {
	return DefaultApiApiOrganizationsOrgIdRolegroupsRolegroupIdRolesGetRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		rolegroupId: rolegroupId,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse2001
 */
func (a *DefaultApiService) OrganizationsOrgIdRolegroupsRolegroupIdRolesGetExecute(r DefaultApiApiOrganizationsOrgIdRolegroupsRolegroupIdRolesGetRequest) (InlineResponse2001, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse2001
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdRolegroupsRolegroupIdRolesGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/rolegroups/{rolegroupId}/roles"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", _neturl.PathEscape(parameterToString(r.orgId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"rolegroupId"+"}", _neturl.PathEscape(parameterToString(r.rolegroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiApiOrganizationsOrgIdRolegroupsRolegroupIdRolesPostRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	orgId string
	rolegroupId string
	requestBody *[]map[string]interface{}
}

func (r DefaultApiApiOrganizationsOrgIdRolegroupsRolegroupIdRolesPostRequest) RequestBody(requestBody []map[string]interface{}) DefaultApiApiOrganizationsOrgIdRolegroupsRolegroupIdRolesPostRequest {
	r.requestBody = &requestBody
	return r
}

func (r DefaultApiApiOrganizationsOrgIdRolegroupsRolegroupIdRolesPostRequest) Execute() ([]map[string]interface{}, *_nethttp.Response, error) {
	return r.ApiService.OrganizationsOrgIdRolegroupsRolegroupIdRolesPostExecute(r)
}

/*
 * OrganizationsOrgIdRolegroupsRolegroupIdRolesPost Method for OrganizationsOrgIdRolegroupsRolegroupIdRolesPost
 * Assigns a role to a rolegroup.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orgId The ID of the organization in GUID format
 * @param rolegroupId The id of a rolegroup
 * @return DefaultApiApiOrganizationsOrgIdRolegroupsRolegroupIdRolesPostRequest
 */
func (a *DefaultApiService) OrganizationsOrgIdRolegroupsRolegroupIdRolesPost(ctx _context.Context, orgId string, rolegroupId string) DefaultApiApiOrganizationsOrgIdRolegroupsRolegroupIdRolesPostRequest {
	return DefaultApiApiOrganizationsOrgIdRolegroupsRolegroupIdRolesPostRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		rolegroupId: rolegroupId,
	}
}

/*
 * Execute executes the request
 * @return []map[string]interface{}
 */
func (a *DefaultApiService) OrganizationsOrgIdRolegroupsRolegroupIdRolesPostExecute(r DefaultApiApiOrganizationsOrgIdRolegroupsRolegroupIdRolesPostRequest) ([]map[string]interface{}, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdRolegroupsRolegroupIdRolesPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/rolegroups/{rolegroupId}/roles"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", _neturl.PathEscape(parameterToString(r.orgId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"rolegroupId"+"}", _neturl.PathEscape(parameterToString(r.rolegroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiApiRolesGetRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	name *string
	description *string
	includeInternal *bool
	search *string
	offset *int32
	limit *int32
	ascending *bool
}

func (r DefaultApiApiRolesGetRequest) Name(name string) DefaultApiApiRolesGetRequest {
	r.name = &name
	return r
}
func (r DefaultApiApiRolesGetRequest) Description(description string) DefaultApiApiRolesGetRequest {
	r.description = &description
	return r
}
func (r DefaultApiApiRolesGetRequest) IncludeInternal(includeInternal bool) DefaultApiApiRolesGetRequest {
	r.includeInternal = &includeInternal
	return r
}
func (r DefaultApiApiRolesGetRequest) Search(search string) DefaultApiApiRolesGetRequest {
	r.search = &search
	return r
}
func (r DefaultApiApiRolesGetRequest) Offset(offset int32) DefaultApiApiRolesGetRequest {
	r.offset = &offset
	return r
}
func (r DefaultApiApiRolesGetRequest) Limit(limit int32) DefaultApiApiRolesGetRequest {
	r.limit = &limit
	return r
}
func (r DefaultApiApiRolesGetRequest) Ascending(ascending bool) DefaultApiApiRolesGetRequest {
	r.ascending = &ascending
	return r
}

func (r DefaultApiApiRolesGetRequest) Execute() (InlineResponse200, *_nethttp.Response, error) {
	return r.ApiService.RolesGetExecute(r)
}

/*
 * RolesGet Method for RolesGet
 * Retrieves all availables roles (permissions)
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return DefaultApiApiRolesGetRequest
 */
func (a *DefaultApiService) RolesGet(ctx _context.Context) DefaultApiApiRolesGetRequest {
	return DefaultApiApiRolesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return InlineResponse200
 */
func (a *DefaultApiService) RolesGetExecute(r DefaultApiApiRolesGetRequest) (InlineResponse200, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse200
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.RolesGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/roles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.name != nil {
		localVarQueryParams.Add("name", parameterToString(*r.name, ""))
	}
	if r.description != nil {
		localVarQueryParams.Add("description", parameterToString(*r.description, ""))
	}
	if r.includeInternal != nil {
		localVarQueryParams.Add("include_internal", parameterToString(*r.includeInternal, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.ascending != nil {
		localVarQueryParams.Add("ascending", parameterToString(*r.ascending, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
